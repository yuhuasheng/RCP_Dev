package com.foxconn.electronics.managementebom.updatebom.controller;

import java.io.ByteArrayOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import com.foxconn.electronics.convertebom.ShowDeriveModelDialog;
import com.foxconn.electronics.domain.Constants;
import com.foxconn.electronics.managementebom.createDCN.DCNService;
import com.foxconn.electronics.managementebom.export.ExcelUtil;
import com.foxconn.electronics.managementebom.export.bom.prt.PrtExportBOMHandle;
import com.foxconn.electronics.managementebom.export.bom.prt.PrtSheetBean;
import com.foxconn.electronics.managementebom.export.changelist.ChangeListHandle;
import com.foxconn.electronics.managementebom.export.changelist.mnt.MntChangeHandle;
import com.foxconn.electronics.managementebom.export.changelist.mnt.MntChangeSheet;
import com.foxconn.electronics.managementebom.export.changelist.prt.PrtChangeHandle;
import com.foxconn.electronics.managementebom.export.changelist.prt.PrtChangeSheet;
import com.foxconn.electronics.managementebom.updatebom.domain.EBOMChangeBean;
import com.foxconn.electronics.managementebom.updatebom.domain.EBOMLineBean;
import com.foxconn.electronics.managementebom.updatebom.service.UpdateEBOMService;
import com.foxconn.electronics.util.HttpUtil;
import com.foxconn.electronics.util.TCUtil;
import com.foxconn.tcutils.util.AjaxResult;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.plm.tc.httpService.jhttp.GetMapping;
import com.plm.tc.httpService.jhttp.HttpRequest;
import com.plm.tc.httpService.jhttp.HttpResponse;
import com.plm.tc.httpService.jhttp.PostMapping;
import com.plm.tc.httpService.jhttp.RequestMapping;
import com.plm.tc.httpService.jhttp.RequestParam;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentBOMLine;
import com.teamcenter.rac.kernel.TCComponentBOMWindow;
import com.teamcenter.rac.kernel.TCComponentGroup;
import com.teamcenter.rac.kernel.TCComponentItem;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCComponentManager;
import com.teamcenter.rac.kernel.TCComponentTask;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCPreferenceService;
import com.teamcenter.rac.pse.AbstractPSEApplication;
import com.teamcenter.rac.pse.operations.RevertAllOperation;
import com.teamcenter.rac.ui.common.RACUIUtil;
import com.teamcenter.soa.client.model.ModelObject;

/**
 * 
 * @author Robert
 *
 */
@RequestMapping("/electronics")
public class UpdateEBOMController
{
    private TCComponentBOMLine      rootLine;
    private UpdateEBOMService       updateEBOMService;
    private EBOMLineBean            rootBean;
    private TCComponentBOMWindow    bomWindow;
    private AbstractPSEApplication  app;
    private String                  bu;
    private String                  userBu;
    private TCComponentItemRevision dcn;
    private TCComponentTask         dcnTask;

    public UpdateEBOMController(AbstractPSEApplication app) throws Exception
    {
        this.app = app;
        this.bomWindow = app.getBOMWindow();
        this.updateEBOMService = new UpdateEBOMService();
    }

    @GetMapping("/getSingleEBOMStruct")
    public AjaxResult getSingleEBOMStruct(@RequestParam("bomuid") String bomuid)
    {
        try
        {
            this.rootLine = bomWindow.getTopBOMLine();
            EBOMLineBean bom = null;
            if (TCUtil.isNull(bomuid))
            {
                bom = updateEBOMService.getSingleBOMStruct(rootLine);
                try
                {
                    this.bu = TCUtil.findBUNameByProject(rootLine.getItem());
                    this.userBu = updateEBOMService.getBuByGroup();
                    bom.setUserBu(userBu);
                    if (this.userBu.equalsIgnoreCase(Constants.MNT))
                    {
                        TCComponentItemRevision itemRev = rootLine.getItemRevision();
                        TCComponentTask task = updateEBOMService.getItemProcessTask(itemRev);
                        if (task != null)
                        {
                            bom.setIsBOMViewWFTask("BOM Team Review".equalsIgnoreCase(task.getParent()
                                                                                          .toString()) && "FXN31_MNT BOM CoWork Process".equalsIgnoreCase(task.getParent().getParent().toString()));
                        }
                        String partType = itemRev.getTypeObject().getName();
                        if ("D9_EE_PCBARevision".equalsIgnoreCase(partType))
                        {
                            bom.setIsNewVersion(false);
                        }
                    }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            else
            {
                TCComponentBOMLine bLine = (TCComponentBOMLine) RACUIUtil.getTCSession().getComponentManager().getTCComponent(bomuid);
                bom = updateEBOMService.getSingleBOMStruct(bLine);
            }
            bom.setIsNewVersion(updateEBOMService.isNewRevsion(rootLine.getItemRevision()));
            this.updateEBOMService.setMaxFindNumMap(bom);
            return AjaxResult.success(bom);
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "系統繁忙，請稍後再試");
    }

    @GetMapping("/getEBOMStruct")
    public AjaxResult getEBOMStruct()
    {
        try
        {
            long startTime = System.currentTimeMillis();
            this.rootLine = bomWindow.getTopBOMLine();
            System.out.println("refresh bom cast time ::  " + (System.currentTimeMillis() - startTime));
            rootLine.refresh();
            com.foxconn.tcutils.util.TCUtil.unpackageBOMStructure(rootLine);
            rootLine.refresh();
            updateEBOMService.loadAllProperties(rootLine, updateEBOMService.ALL_PART_ATTRS, updateEBOMService.ALL_BOM_ATTRS);
            this.rootBean = updateEBOMService.getBOMStruct(rootLine);
            rootBean.setIsNewVersion(updateEBOMService.isNewRevsion(rootLine.getItemRevision()));
            try
            {
                this.bu = TCUtil.findBUNameByProject(rootLine.getItem());
                this.userBu = updateEBOMService.getBuByGroup();
                rootBean.setUserBu(userBu);
                // if (this.userBu.equalsIgnoreCase(Constants.MNT))
                {
                    // c0103270
                    TCComponentItemRevision itemRev = rootLine.getItemRevision();
                    List<TCComponentItemRevision> dcns = updateEBOMService.getDCNItemRev(itemRev);
                    boolean isDCNEdit = false;
                    if (dcns.size() > 0)
                    {
                        dcn = dcns.get(dcns.size() - 1);
                        if (dcn != null)
                        {
                            for (TCComponentItemRevision d : dcns)
                            {
                                if (!TCUtil.isReleased(d))
                                {
                                    rootBean.setIsCanDcn(Boolean.FALSE);
                                    break;
                                }
                            }
                            TCComponentTask task = updateEBOMService.getItemProcessTask(itemRev);
                            if (task != null)
                            {
                                dcnTask = task.getParent().getParent();
                                isDCNEdit = updateEBOMService.judgeUpdateDcn(task);
                            }
                        }
                    }
                    boolean isBOMCoWorkEdit = false;
                    TCComponentTask task = updateEBOMService.getItemProcessTask(itemRev);
                    if (task != null)
                    {
                        boolean isF31Edit = "BOM Team Review".equalsIgnoreCase(task.getParent()
                                                                                   .toString()) && "FXN31_MNT BOM CoWork Process".equalsIgnoreCase(task.getParent().getParent().toString());
                        boolean isF46Edit = "FXN46_MNT L6-EBOM(衍生機種) Release Process".equalsIgnoreCase(task.getParent()
                                                                                                           .getParent()
                                                                                                           .toString()) && ("1-CE Review".equalsIgnoreCase(task.getParent()
                                                                                                                                                               .toString()) || "4-BOMTeam Review".equalsIgnoreCase(task.getParent().toString()));
                        isBOMCoWorkEdit = isF31Edit || isF46Edit;
                    }
                    else
                    {
                        // 没有发起流程之前 PSU.R&D.Monitor.D_Group EE.R&D.Monitor.D_Group 要可以编辑
                        ModelObject[] wfModelObject = updateEBOMService.getWfRelation(itemRev);
                        if (wfModelObject.length == 0 && updateEBOMService.isEditDept())
                        {
                            rootBean.setCanEditPIEE(true);
                        }
                    }
                    rootBean.setIsBOMViewWFTask(isDCNEdit || isBOMCoWorkEdit);
                    String partType = itemRev.getTypeObject().getName();
                    if ("D9_EE_PCBARevision".equalsIgnoreCase(partType))
                    {
                        rootBean.setIsNewVersion(false);
                    }
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            this.updateEBOMService.setMaxFindNumMap(rootBean);
            System.out.println("all cast time ::  " + (System.currentTimeMillis() - startTime));
            return AjaxResult.success(rootBean);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "系統繁忙，請稍後再試");
    }

    /**
     * 
     * Robert 2022年5月23日
     * 
     * @param hhpn
     * @param mfg
     * @param mfgPn
     * @return
     */
    @GetMapping("/findMainParts")
    public AjaxResult findParts(@RequestParam("hhpn") String hhpn, @RequestParam("mfg") String mfg, @RequestParam("mfgPn") String mfgPn, @RequestParam("sourceSystem") String sourceSystem)
    {
        List<EBOMLineBean> list = null;
        if (TCUtil.isNull(hhpn) && TCUtil.isNull(mfg) && TCUtil.isNull(mfgPn))
        {
            return AjaxResult.error(AjaxResult.STATUS_PARAM_MISS, "Search condition cannot all be empty!");
        }
        try
        {
            if ("pnms".equalsIgnoreCase(sourceSystem))
            {
                hhpn = hhpn.trim();
                if (!TCUtil.isNull(hhpn))
                {
                    if (hhpn.length() == 15)
                    {
                        list = updateEBOMService.queryMainSource(hhpn, mfg, mfgPn);
                        if (list.size() == 0)
                        {
                            if (UpdateEBOMService.springCloudUrl == null)
                            {
                                UpdateEBOMService.springCloudUrl = TCUtil.getPreference(RACUIUtil.getTCSession(), TCPreferenceService.TC_preference_site, "D9_SpringCloud_URL");
                            }
                            String result = HttpUtil.httpGet(UpdateEBOMService.springCloudUrl + "/tc-integrate/pnms/getHHPNInfo", "hhpn=" + hhpn, 20000);
                            if (result.length() > 0)
                            {
                                // if (Constants.MNT.equalsIgnoreCase(bu))
                                // {
                                // char[] hhcs = hhpn.toCharArray();
                                // hhcs[14] = 'H';
                                // hhpn = new String(hhcs);
                                // }
                                Gson gson = new Gson();
                                Map<String, String> resultMap = gson.fromJson(result, Map.class);
                                EBOMLineBean bean = new EBOMLineBean();
                                bean.setItem(hhpn);
                                bean.setMfg(resultMap.get("mfg"));
                                bean.setMfgPn(resultMap.get("mfgpn"));
                                bean.setDescription(resultMap.get("des"));
                                bean.setSourceSystem("pnms");
                                list.add(bean);
                            }
                        }
                    }
                    else
                    {
                        return AjaxResult.error(AjaxResult.STATUS_PARAM_ERROR, "Query from pnms can only be an exact query. The Foxconn part number length must be 15 yards. !");
                    }
                }
                else if (!TCUtil.isNull(mfg) || !TCUtil.isNull(mfgPn))
                {
                    list = updateEBOMService.queryMainSource(hhpn, mfg, mfgPn);
                    if (list.size() == 0 && !TCUtil.isNull(mfgPn))
                    {
                        if (UpdateEBOMService.springCloudUrl == null)
                        {
                            UpdateEBOMService.springCloudUrl = TCUtil.getPreference(RACUIUtil.getTCSession(), TCPreferenceService.TC_preference_site, "D9_SpringCloud_URL");
                        }
                        String result = HttpUtil.httpGet(UpdateEBOMService.springCloudUrl + "/tc-integrate/pnms/getHHPNInfoByMfg", "mfgPn=" + mfgPn + "&mfg=" + mfg, 20000);
                        if (result.length() > 0)
                        {
                            Gson gson = new Gson();
                            List<Map<String, String>> resultList = gson.fromJson(result, List.class);
                            for (Map<String, String> resultMap : resultList)
                            {
                                hhpn = resultMap.get("hhpn");
                                if (Constants.MNT.equalsIgnoreCase(bu))
                                {
                                    char[] hhcs = hhpn.toCharArray();
                                    hhcs[14] = 'H';
                                    hhpn = new String(hhcs);
                                }
                                EBOMLineBean bean = new EBOMLineBean();
                                bean.setItem(hhpn);
                                bean.setMfg(resultMap.get("mfg"));
                                bean.setMfgPn(resultMap.get("mfgpn"));
                                bean.setDescription(resultMap.get("des"));
                                bean.setSourceSystem("pnms");
                                list.add(bean);
                            }
                        }
                    }
                }
            }
            else
            {
                list = updateEBOMService.queryMainSource(hhpn, mfg, mfgPn);
            }
            return AjaxResult.success(list);
        }
        catch (Exception e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "find parts fail!");
    }

    @PostMapping("/submitBOM")
    public AjaxResult submitBOM(HttpRequest req) throws TCException
    {
        String json = req.getBody();
        Gson gson = new Gson();
        EBOMLineBean newRootBean = gson.fromJson(json, EBOMLineBean.class);
        com.foxconn.mechanism.util.TCUtil.setBypass(RACUIUtil.getTCSession());
        try
        {
            TCComponentItemRevision revItemOld = rootLine.getItemRevision();
            TCComponentBOMLine newLine = updateEBOMService.updateBOM(rootLine, newRootBean, rootBean, true);
            updateEBOMService.updateEERelation(revItemOld, newLine.getItemRevision());
            bomWindow.save();
            this.rootBean = newRootBean;
        }
        catch (Exception e)
        {
            // RevertAllCommand r = new RevertAllCommand(app);
            RevertAllOperation var2 = new RevertAllOperation(app);
            var2.executeOperation();
            long oldTime = System.currentTimeMillis();
            while (bomWindow.isModified())
            {
                var2.executeOperation();
                if (System.currentTimeMillis() - oldTime > 500)
                {
                    break;
                }
            }
            e.printStackTrace();
            com.foxconn.mechanism.util.TCUtil.closeBypass(RACUIUtil.getTCSession());
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "BOM update failed ," + e.getLocalizedMessage());
        }
        try
        {
            updateEBOMService.updateItems(newRootBean);
            List<TCComponentItemRevision> dcnDatas = new ArrayList<>(updateEBOMService.getUpdatedBOMs());
            dcnDatas.addAll(updateEBOMService.getUpdatedParts());
            if (dcn != null)
            {
                DCNService.updateDCN(dcn, dcnTask, dcnDatas);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "Item Property update failed," + e.getLocalizedMessage());
        }
        finally
        {
            bomWindow.refresh();
            com.foxconn.mechanism.util.TCUtil.closeBypass(RACUIUtil.getTCSession());
        }
        return AjaxResult.success();
    }

    @PostMapping("/saveBOM")
    public AjaxResult saveBOM(HttpRequest req) throws TCException
    {
        String json = req.getBody();
        Gson gson = new Gson();
        EBOMChangeBean newRootBean = gson.fromJson(json, EBOMChangeBean.class);
        com.foxconn.mechanism.util.TCUtil.setBypass(RACUIUtil.getTCSession());
        try
        {
            // TCComponentItemRevision revItemOld = rootLine.getItemRevision();
            // updateEBOMService.updateEERelation(revItemOld, newLine.getItemRevision());
            bomWindow.save();
        }
        catch (Exception e)
        {
            // RevertAllCommand r = new RevertAllCommand(app);
            RevertAllOperation var2 = new RevertAllOperation(app);
            var2.executeOperation();
            long oldTime = System.currentTimeMillis();
            while (bomWindow.isModified())
            {
                var2.executeOperation();
                if (System.currentTimeMillis() - oldTime > 500)
                {
                    break;
                }
            }
            e.printStackTrace();
            com.foxconn.mechanism.util.TCUtil.closeBypass(RACUIUtil.getTCSession());
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "BOM update failed ," + e.getLocalizedMessage());
        }
        try
        {
            // updateEBOMService.updateItems(newRootBean);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "Item Property update failed," + e.getLocalizedMessage());
        }
        finally
        {
            bomWindow.refresh();
            com.foxconn.mechanism.util.TCUtil.closeBypass(RACUIUtil.getTCSession());
        }
        return AjaxResult.success();
    }

    @GetMapping("/getDeriveInfo")
    public AjaxResult getDeriveInfo()
    {
        try
        {
            Object[] derives = UpdateEBOMService.getDeriveItemsByPca(rootLine.getItemRevision());
            return AjaxResult.success(derives);
        }
        catch (TCException e)
        {
            e.printStackTrace();
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, e.getLocalizedMessage());
        }
    }

    @GetMapping("/findVersions")
    public AjaxResult findVersion()
    {
        try
        {
            TCComponentItem item = rootLine.getItem();
            TCComponent[] itemRevs = item.getRelatedComponents("revision_list");
            List list = new ArrayList();
            for (TCComponent itemRev : itemRevs)
            {
                Map<String, String> map = new HashMap<String, String>();
                String version = itemRev.getProperty("current_revision_id");
                String uid = itemRev.getUid();
                map.put("uid", uid);
                map.put("version", version);
                list.add(map);
            }
            return AjaxResult.success(list);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, e.getLocalizedMessage());
        }
    }

    @GetMapping("/getOtherEBOM")
    public AjaxResult getOtherBOM(@RequestParam("uid") String uid)
    {
        try
        {
            TCComponentItemRevision itemVev = (TCComponentItemRevision) RACUIUtil.getTCSession().getComponentManager().getTCComponent(uid);
            EBOMLineBean otherBOMBean = ChangeListHandle.getMNTTopBOMLine(itemVev);
            // otherBOMBean.setVersion(itemVev.getProperty("current_revision_id"));
            return AjaxResult.success(otherBOMBean);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, e.getLocalizedMessage());
        }
    }

    @GetMapping("/downloadPrtChange")
    public void downLoadPrtChangeList(@RequestParam("sourceRevUid") String sourceRevUid, @RequestParam("targetRevUid") String targetRevUid, HttpResponse resp)
    {
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String startTime = sdf.format(new Date());
            TCComponentManager tcMgr = RACUIUtil.getTCSession().getComponentManager();
            TCComponentItemRevision sourceItemVev = (TCComponentItemRevision) tcMgr.getTCComponent(sourceRevUid);
            TCComponentItemRevision targetItemVev = (TCComponentItemRevision) tcMgr.getTCComponent(targetRevUid);
            PrtChangeHandle prtHandle = new PrtChangeHandle(sourceItemVev, targetItemVev);
            prtHandle.compareBOM();
            Workbook wb = prtHandle.writeExcel(new PrtChangeSheet());
            ByteArrayOutputStream outStream = new ByteArrayOutputStream();
            wb.write(outStream);
            wb.close();
            resp.addHeader("Content-Disposition", "attachment;filename=" + prtHandle.getExcelFileName());
            resp.out(outStream.toByteArray());
            outStream.close();
            String endTime = sdf.format(new Date());
            updateEBOMService.writeLog(sourceItemVev, startTime, endTime, "EBOM比對效率");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    @GetMapping("/downloadMntChange")
    public void downLoadMntChangeList(@RequestParam("sourceRevUid") String sourceRevUid, @RequestParam("targetRevUid") String targetRevUid, HttpResponse resp)
    {
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
            String startTime = sdf.format(new Date());
            TCComponentManager tcMgr = RACUIUtil.getTCSession().getComponentManager();
            TCComponentItemRevision sourceItemVev = (TCComponentItemRevision) tcMgr.getTCComponent(sourceRevUid);
            TCComponentItemRevision targetItemVev = (TCComponentItemRevision) tcMgr.getTCComponent(targetRevUid);
            MntChangeHandle mntHandle = new MntChangeHandle(sourceItemVev, targetItemVev);
            // mntHandle.writeDCNExcel(new FileOutputStream("d://testDCNChange.xlsx"),
            // null); // 测试
            // MntDCNChange.generateMNTDCNChange((TCComponentItemRevision)
            // tcMgr.getTCComponent("RLuN2Zp2Z5OtvC")); // 测试
            mntHandle.compareBOM();
            MntChangeSheet mntSheet = new MntChangeSheet();
            mntSheet.setModel(targetItemVev.getProperty("d9_ModelName"));
            Workbook wb = mntHandle.writeExcel(mntSheet);
            ByteArrayOutputStream outStream = new ByteArrayOutputStream();
            wb.write(outStream);
            wb.close();
            resp.addHeader("Content-Disposition", "attachment;filename=" + mntHandle.getExcelFileName());
            resp.out(outStream.toByteArray());
            outStream.close();
            String endTime = sdf.format(new Date());
            updateEBOMService.writeLog(sourceItemVev, startTime, endTime, "EBOM比對效率");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    @GetMapping("/writeActionLog")
    public AjaxResult writeActionLog(@RequestParam("revUid") String revUid, @RequestParam("startTime") String startTime, @RequestParam("endTime") String endTime, @RequestParam("func") String func)
    {
        try
        {
            TCComponentManager tcMgr = RACUIUtil.getTCSession().getComponentManager();
            TCComponentItemRevision itemRev = (TCComponentItemRevision) tcMgr.getTCComponent(revUid);
            updateEBOMService.writeLog(itemRev, startTime, endTime, func);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return AjaxResult.success();
    }

    @GetMapping("/downloadPrtEBOM")
    public void downLoadPrtEBOM(HttpRequest req, HttpResponse resp)
    {
        try
        {
            String uid = req.get("uid");
            TCComponentItemRevision itemVev = (TCComponentItemRevision) RACUIUtil.getTCSession().getComponentManager().getTCComponent(uid);
            PrtExportBOMHandle prtExportBOMHandle = new PrtExportBOMHandle(itemVev);
            PrtSheetBean sheetBean = prtExportBOMHandle.getSheetBean();
            ExcelUtil excelUtil = new ExcelUtil();
            Workbook wb = excelUtil.getWorkbook(PrtSheetBean.TEMPLATE);
            Sheet sheet = wb.getSheetAt(0);
            excelUtil.setRowCellVaule(sheetBean, sheet, null);
            CellStyle cellStyle = ExcelUtil.getCellStyle(wb);
            excelUtil.setCellValue(prtExportBOMHandle.getBOMBeanList(), sheetBean.getStart(), sheet, cellStyle);
            ByteArrayOutputStream outStream = new ByteArrayOutputStream();
            wb.write(outStream);
            wb.close();
            resp.addHeader("Content-Disposition", "attachment;filename=" + prtExportBOMHandle.getExcelFileName());
            resp.out(outStream.toByteArray());
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    @GetMapping("/getMaxFindNum")
    public AjaxResult getMaxNum(@RequestParam("itemRevUid") String itemRevUid)
    {
        try
        {
            int[] max = updateEBOMService.getMaxFindNum(itemRevUid);
            Map<String, Integer> map = new HashMap<String, Integer>();
            map.put("findNum", max[0]);
            map.put("altGroup", max[1]);
            return AjaxResult.success(map);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, "系統繁忙，請稍後再試");
    }
}
