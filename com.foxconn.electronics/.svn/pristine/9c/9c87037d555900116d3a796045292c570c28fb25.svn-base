package com.foxconn.electronics.matrixbom.service;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Semaphore;
import java.util.stream.Stream;

import com.alibaba.fastjson.JSONObject;
import com.foxconn.electronics.matrixbom.constant.MatrixBOMConstant;
import com.foxconn.electronics.matrixbom.domain.PicBean;
import com.foxconn.electronics.matrixbom.domain.ProductLineBOMBean;
import com.foxconn.electronics.matrixbom.domain.VariableBOMBean;
import com.foxconn.tcutils.util.AjaxResult;
import com.foxconn.tcutils.util.CommonTools;
import com.foxconn.tcutils.util.TCUtil;
import com.google.gson.Gson;
import com.teamcenter.rac.aif.AbstractAIFUIApplication;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.commands.namedreferences.ExportFilesOperation;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentBOMLine;
import com.teamcenter.rac.kernel.TCComponentBOMWindow;
import com.teamcenter.rac.kernel.TCComponentDataset;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCComponentTcFile;
import com.teamcenter.rac.kernel.TCComponentUser;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCSession;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.convert.Convert;
import cn.hutool.core.lang.TypeReference;
import cn.hutool.core.util.ArrayUtil;
import cn.hutool.core.util.ObjUtil;
import cn.hutool.core.util.StrUtil;

public class MatrixBOMService {
	public SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");	// 设置日期格式
	private TCSession session;

	private final int threadNum = 4;

	private ExecutorService es = null;;

	public MatrixBOMService() {
	}

	public MatrixBOMService(AbstractAIFUIApplication app) {
		session = (TCSession) app.getSession();
		es = Executors.newFixedThreadPool(threadNum); // 创建固定大小的线程池对象
	}

	public AjaxResult getImg(String uid) {
		TCComponentBOMWindow productLineBomWindow = null;
		try {
			TCComponentItemRevision productLineItemRev = (TCComponentItemRevision) session.getComponentManager()
					.getTCComponent(uid);
			if (ObjUtil.isEmpty(productLineItemRev)) {
				throw new Exception("获取产品BOM对象版本失败");
			}
			
			productLineBomWindow = TCUtil.createBOMWindow(session);
			TCComponentBOMLine productLineTopLine = TCUtil.getTopBomline(productLineBomWindow, productLineItemRev);
			
			productLineTopLine.refresh();
			AIFComponentContext[] childrens_Packed = productLineTopLine.getChildren();
			for (AIFComponentContext aifchildren : childrens_Packed) {
				TCComponentBOMLine children = (TCComponentBOMLine) aifchildren.getComponent();
				if (children.isPacked()) {
					children.unpack();
					children.refresh();
				}
			}
			productLineTopLine.refresh();
			AIFComponentContext[] childrens = productLineTopLine.getChildren();
			ArrayList<PicBean> dataList = new ArrayList<PicBean>();
			if (childrens.length > 0) {
				

				for (AIFComponentContext childrenAIF : childrens) {
					TCComponentBOMLine children = (TCComponentBOMLine) childrenAIF.getComponent();
					
					String bl_item_id = children.getProperty("bl_item_item_id");
					String bl_occ_d9_Category = children.getProperty("bl_occ_d9_Category");
					String bl_occ_d9_Plant = children.getProperty("bl_occ_d9_Plant");
					String bl_lineid = CommonTools.md5Encode(bl_item_id+bl_occ_d9_Category+bl_occ_d9_Plant);

					//下载图片,转为Base64返回
					Map<String, String> downloadFile = downloadFile(children.getItemRevision());
					String Base64Str = downloadFile.get("base64Str");
					
					PicBean pic = new PicBean();
					pic.lineId =  bl_lineid;
					pic.sub  =  true;
					pic.base64Str = Base64Str;
					pic.picPath = downloadFile.get("picPath");
					dataList.add(pic);
					
					if(children.hasSubstitutes()) {
						TCComponentBOMLine[] listSubstitutes = children.listSubstitutes();
						for (TCComponentBOMLine subBomline : listSubstitutes) {
							String sub_bl_item_id = subBomline.getProperty("bl_item_item_id");
							String sub_bl_occ_d9_Category = subBomline.getProperty("bl_occ_d9_Category");
							String sub_bl_occ_d9_Plant = subBomline.getProperty("bl_occ_d9_Plant");
							String sub_lineid = CommonTools.md5Encode(sub_bl_item_id+sub_bl_occ_d9_Category+sub_bl_occ_d9_Plant);
							
							
							//下载图片,转为Base64返回
							Map<String, String> sub_downloadFile = downloadFile(subBomline.getItemRevision());
							String sub_Base64Str = sub_downloadFile.get("base64Str");
							
							PicBean sub_pic = new PicBean();
							sub_pic.lineId =  sub_lineid;
							sub_pic.sub = true;
							sub_pic.base64Str = sub_Base64Str;
							sub_pic.picPath = sub_downloadFile.get("picPath");
							dataList.add(sub_pic);
						}
					}
				}
			
				
				
//				ExecutorService service = Executors.newCachedThreadPool();
//				Semaphore position = new Semaphore(4);
//				
//				for (int i = 0; i < childrens.length; i++) {
//					
//					service.submit(new MyExecutorGetImg(childrens[i],dataList,position));
//				}
//				
//				Thread.sleep(childrens.length * 250);
//				
//				position.acquireUninterruptibly(4);
//				position.release(4);
//				service.shutdown();
			}
//			String json = JSONObject.toJSONString(dataList);
//			System.out.println("Base64Strdata:"+json);
			
			return new AjaxResult(AjaxResult.STATUS_SUCCESS, "图片转化完成", dataList);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, e.getLocalizedMessage());
		} finally {
			if (ObjUtil.isNotEmpty(productLineBomWindow)) {
				try {
					productLineBomWindow.close();
				} catch (TCException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	
	
	/**
	 * 获取MatrixBOM数据
	 * 
	 * @param uid
	 * @return
	 */
	public AjaxResult getMatrixBOMStruct(String uid) {
		try {
			TCComponentItemRevision productLineItemRev = (TCComponentItemRevision) session.getComponentManager()
					.getTCComponent(uid);
			if (ObjUtil.isEmpty(productLineItemRev)) {
				throw new Exception("获取产品BOM对象版本失败");
			}
			Future<VariableBOMBean> future1 = handlerSeriesBOM(productLineItemRev);
			Future<ProductLineBOMBean> future2 = handlerProductLineBOM(productLineItemRev);

			VariableBOMBean rootSeriesBOMBean = future1.get();
			ProductLineBOMBean rootProductLineBOMBean = future2.get();

			if (StrUtil.isNotEmpty(rootSeriesBOMBean.getErrorMsg())) {
				throw new Exception(rootSeriesBOMBean.getErrorMsg());
			}
			if (StrUtil.isNotEmpty(rootProductLineBOMBean.getErrorMsg())) {
				throw new Exception(rootProductLineBOMBean.getErrorMsg());
			}

			JSONObject data = new JSONObject();
			String matrixType = productLineItemRev.getProperty("d9_MatrixType");
			String object_string = productLineItemRev.getProperty("object_string");
			//String item_id = productLineItemRev.getProperty("item_id");
			//String item_revision_id = productLineItemRev.getProperty("item_revision_id");
			//String object_name = productLineItemRev.getProperty("object_name");
			String object_type = productLineItemRev.getProperty("object_type");
			TCComponentUser tcUser = (TCComponentUser) productLineItemRev.getReferenceProperty("owning_user");
			String owning_user = tcUser.toString();
			Date date1 = productLineItemRev.getTCProperty("creation_date").getDateValue();
			Date date2 = productLineItemRev.getTCProperty("last_mod_date").getDateValue();
			String creation_date = df.format(date1);
			String last_mod_date = df.format(date2);
			
			String release_status_list = "";
			TCComponent[] relStatus = productLineItemRev.getReferenceListProperty("release_status_list");
			if (relStatus != null && relStatus.length > 0) {
				TCComponent status = relStatus[relStatus.length - 1];
				release_status_list = status.getTCProperty("name").getStringValue();
			}
			
			
			data.put("matrixType", matrixType);
			data.put("object_string", object_string);
			//data.put("item_id", item_id);
			//data.put("item_revision_id", item_revision_id);
			//data.put("object_name", object_name);
			data.put("object_type", object_type);
			data.put("owning_user", owning_user);
			data.put("creation_date", creation_date);
			data.put("last_mod_date", last_mod_date);
			data.put("release_status_list", release_status_list);
			
			
			data.put("partList", rootProductLineBOMBean);
			data.put("variableBOM", rootSeriesBOMBean);
			
			String json = JSONObject.toJSONString(data);
			System.out.println("data:"+json);

			return new AjaxResult(AjaxResult.STATUS_SUCCESS, "查询成功", data);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, e.getLocalizedMessage());
		}
	}

	/**
	 * 保存MatrixBOM数据
	 * 
	 * @param data
	 * @return
	 */
	public AjaxResult saveMatrixBOM(String data) {
		try {
			
			System.out.println("saveMatrixBOM = "+data);
			
			Gson gson = new Gson();
			VariableBOMBean rootBean = gson.fromJson(data, VariableBOMBean.class);
			saveSeriesData(rootBean);
			return AjaxResult.success("保存成功");
		} catch (Exception e) {
			return AjaxResult.error(AjaxResult.STATUS_SERVER_ERROR, e.getLocalizedMessage());
		}
	}

	/**
	 * 处理系列BOM
	 * 
	 * @param productLineItemRev
	 * @return
	 */
	private Future<VariableBOMBean> handlerSeriesBOM(TCComponentItemRevision productLineItemRev) {
		Future<VariableBOMBean> future = es.submit(() -> {
			Thread.currentThread().setName("处理Series BOM Thread: ");
			TCComponentBOMWindow seriesBomWindow = null;
			try {

				TCComponentItemRevision seriesItemRev = getSeriesItemRev(productLineItemRev);
				if (ObjUtil.isEmpty(seriesItemRev)) {
				  return new VariableBOMBean();
				}

				seriesBomWindow = TCUtil.createBOMWindow(session);
				if (ObjUtil.isEmpty(seriesBomWindow)) {
					throw new Exception("获取BOMWindow失败");
				}
				
				seriesItemRev.refresh();
				TCComponentBOMLine seriesTopLine = TCUtil.getTopBomline(seriesBomWindow, seriesItemRev);
				if (ObjUtil.isEmpty(seriesTopLine)) {
					throw new Exception("获取Series顶阶BOMLine失败");
				}
				seriesTopLine.refresh();

				return getSeriesBOMStruct(seriesTopLine);
			} catch (Exception e) {
				e.printStackTrace();
				VariableBOMBean bean = new VariableBOMBean();
				bean.setErrorMsg(e.getLocalizedMessage());
				return bean;
			} finally {
				if (ObjUtil.isNotEmpty(seriesBomWindow)) {
					seriesBomWindow.close();
				}
			}
		});
		return future;
	}

	/**
	 * 获取产品系列BOM结构
	 * 
	 * @param rootLine
	 * @return
	 * @throws TCException
	 * @throws InterruptedException 
	 */
	private VariableBOMBean getSeriesBOMStruct(TCComponentBOMLine rootLine) throws TCException, InterruptedException {
		rootLine.refresh();
		VariableBOMBean rootBean = new VariableBOMBean(rootLine);
		System.out.println(Thread.currentThread().getName() + " ==>> title: " + rootBean.getItemRevUid());
		AIFComponentContext[] componmentContext = null;
		if (rootLine.hasChildren()) {
			componmentContext = rootLine.getChildren();
		}
		if (componmentContext != null) {
			
			ExecutorService service = Executors.newCachedThreadPool();
			Semaphore position = new Semaphore(4);
			for (int i = 0; i < componmentContext.length; i++) {
				service.submit(new MyExecutorBOMStruct(componmentContext[i],rootBean,position));
			}
			Thread.sleep(componmentContext.length * 250);
			position.acquireUninterruptibly(4);
			position.release(4);
			service.shutdown();
		}
		return rootBean;
	}
	

	/**
	 * 处理产品BOM
	 * 
	 * @param productLineItemRev
	 * @return
	 */
	private Future<ProductLineBOMBean> handlerProductLineBOM(TCComponentItemRevision productLineItemRev) {
		Future<ProductLineBOMBean> future = es.submit(() -> {
			TCComponentBOMWindow productLineBomWindow = null;
			Thread.currentThread().setName("处理ProductLine BOM Thread: ");
			try {
				productLineBomWindow = TCUtil.createBOMWindow(session);
				if (ObjUtil.isEmpty(productLineBomWindow)) {
					throw new Exception("获取BOMWindow失败");
				}
				TCComponentBOMLine productLineTopLine = TCUtil.getTopBomline(productLineBomWindow, productLineItemRev);
				if (ObjUtil.isEmpty(productLineTopLine)) {
					throw new Exception("获取ProductLine顶阶BOMLine失败");
				}
				
				return getProductLineBOMStruct(productLineTopLine);
			} catch (Exception e) {
				e.printStackTrace();
				ProductLineBOMBean bean = new ProductLineBOMBean();
				return bean;
			} finally {
				if (ObjUtil.isNotEmpty(productLineBomWindow)) {
					productLineBomWindow.close();
				}
			}
		});

		return future;
	}

	/**
	 * 获取产品线BOM结构
	 * 
	 * @param rootLine
	 * @return
	 * @throws Exception 
	 */
	private ProductLineBOMBean getProductLineBOMStruct(TCComponentBOMLine rootLine) throws Exception {
		ProductLineBOMBean rootBean = new ProductLineBOMBean(rootLine,session);
		System.out.println(Thread.currentThread().getName() + " ==>> title: " + rootBean.getItemId());
		
		rootLine.refresh();
		AIFComponentContext[] childrens_Packed = rootLine.getChildren();
		for (AIFComponentContext aifchildren : childrens_Packed) {
			TCComponentBOMLine children = (TCComponentBOMLine) aifchildren.getComponent();
			//System.out.println(children.isPacked());
//			UnpackCommand command = new UnpackCommand(children);
//			command.executeModal();
			if (children.isPacked()) {
				children.unpack();
				children.refresh();
			}
		}
		//System.out.println("rootLine.getChildren() = "+rootLine.getChildren().length);
		rootLine.refresh();
		ArrayList<TCComponentBOMLine>  lines=new ArrayList<TCComponentBOMLine>();
		AIFComponentContext[] childrens = rootLine.getChildren();
		
		//System.out.println("childrens = "+childrens.length);
		if (childrens != null) {
			for (AIFComponentContext aifchildren : childrens) {
				TCComponentBOMLine children = (TCComponentBOMLine) aifchildren.getComponent();
				if (!children.isSubstitute()) {
					lines.add(children);
				}
			}
			
			for(TCComponentBOMLine bl:lines) {
				//ProductLineBOMBean bomBean = getProductLineBOMStruct(bl);
				ProductLineBOMBean bomBean = new ProductLineBOMBean(bl,session);
				if (bl.hasSubstitutes()) {
					TCComponentBOMLine[] listSubstitutes = bl.listSubstitutes();
					List<ProductLineBOMBean> subBeanList = new ArrayList<ProductLineBOMBean>();
					for (TCComponentBOMLine subBomline : listSubstitutes) {
						ProductLineBOMBean subBean = new ProductLineBOMBean(subBomline,session);
						//ProductLineBOMBean subBean = tcPropMapping(new ProductLineBOMBean(), subBomline);
						subBean.setSub(true); // 设置替代料标识位true
						subBean.setItemRevUid(subBomline.getItemRevision().getUid());
						subBean.setLineId(CommonTools.md5Encode(subBean.getItemId()+subBean.getCategory().trim()+subBean.getPlant()));
						subBeanList.add(subBean);
						addProductSubList(bomBean, subBean);
					}
				 }
				addProductList(rootBean, bomBean);
			}
		}
		return rootBean;
	}

	
	/**
	 * 添加父子料
	 * 
	 * @param current
	 * @param next
	 */
	private void addProductList(ProductLineBOMBean current, ProductLineBOMBean next) {
		List<ProductLineBOMBean> child = current.getChild();
		if (null == child) {
			child = new ArrayList<ProductLineBOMBean>();
			current.setChild(child);
		}

		for (ProductLineBOMBean bean : child) {
			if (bean.getLineId().equalsIgnoreCase(next.getLineId())) {
				
				return;
			}
		}
		child.add(next);
	}

	/**
	 * 添加主料和替代料
	 * 
	 * @param current
	 * @param next
	 */
	private void addProductSubList(ProductLineBOMBean current, ProductLineBOMBean next) {
		List<ProductLineBOMBean> subList = current.getSubList();
		if (null == subList) {
			subList = new ArrayList<ProductLineBOMBean>();
			current.setSubList(subList);
		}

		for (ProductLineBOMBean subBean : subList) {
			if (subBean.getLineId().equals(next.getLineId())) {
				return;
			}
		}
	    subList.add(next);	
	}
	
	
	/**
	 * 添加父子料
	 * 
	 * @param current
	 * @param next
	 */
	private void addSeriesList(VariableBOMBean current, VariableBOMBean next) {
		List<VariableBOMBean> child = current.getChild();
		if (null == child) {
			child = new ArrayList<VariableBOMBean>();
			current.setChild(child);
		}
		
		child.add(next);
		
	}

	/**
	 * 添加主料和替代料
	 * 
	 * @param current
	 * @param next
	 */
	private void addSeriesSubList(VariableBOMBean current, VariableBOMBean next) {
		List<VariableBOMBean> subList = current.getSubList();
		if (null == subList) {
			subList = new ArrayList<VariableBOMBean>();
			current.setSubList(subList);
		}

	   subList.add(next);
		
	}

	/**
	 * 保存系列BOM数据
	 * 
	 * @param rootBean
	 * @throws TCException
	 */
	private void saveSeriesData(VariableBOMBean rootBean) throws TCException {
		TCComponentBOMWindow bomWindow = null;
		try {
			String uid = rootBean.getItemRevUid();
			TCComponentItemRevision seriesItemRev = (TCComponentItemRevision) session.getComponentManager()
					.getTCComponent(uid);

			bomWindow = TCUtil.createBOMWindow(session);
			if (ObjUtil.isEmpty(bomWindow)) {
				throw new Exception("获取BOMWindow失败");
			}

			TCComponentBOMLine topLine = TCUtil.getTopBomline(bomWindow, seriesItemRev);
			
			if (ObjUtil.isEmpty(topLine)) {
				throw new Exception("获取Series顶阶BOMLine失败");
			}
           TCUtil.setBypass(session);
           Map<String,String> seriesMap= new HashMap<String,String>();
           rootBean.setLevel(0);
           List<VariableBOMBean> seriesList=rootBean.getChild();
           for(VariableBOMBean s:seriesList) {
        	   seriesMap.put(s.getItemRevUid(), s.getItemRevUid());
        	   s.setLevel(1);
        	   List<VariableBOMBean>  chList=s.getChild();
        	   for(VariableBOMBean s1:chList) {
        		   s1.setLevel(2);
        	   }
           }
           
           
			saveData(topLine, rootBean,seriesMap); // 保存数据
			TCUtil.closeBypass(session);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (ObjUtil.isNotEmpty(bomWindow)) {
				bomWindow.save();
				bomWindow.close();
			}
		}
	}

	/**
	 * 保存数据
	 * 
	 * @param rootLine
	 * @param bean
	 * @throws TCException
	 */
	private void saveData(TCComponentBOMLine bomLine, VariableBOMBean newBean,Map<String,String> seriesMap) throws Exception {
		bomLine.refresh();
		AIFComponentContext[] componmentContext = null;
		if (bomLine.hasChildren()) {
			componmentContext = bomLine.getChildren();
		}

		if (componmentContext != null) {
			List<TCComponentBOMLine> lines=new ArrayList<>();
			for(AIFComponentContext af:componmentContext) {
				TCComponentBOMLine childBomLine=(TCComponentBOMLine)af.getComponent();
				if(childBomLine.isSubstitute()) {
					continue;
				}
				if(childBomLine.isPacked()) {
					TCComponentBOMLine[] tmpsBomLines=childBomLine.getPackedLines();
					for(TCComponentBOMLine l:tmpsBomLines) {
						lines.add(l);
					}
					childBomLine.unpack();
					childBomLine.refresh();
					lines.add(childBomLine);
				 }else {
					lines.add(childBomLine);
				 }
			}
			
			for(TCComponentBOMLine childBomLine:lines ) {
				TCComponentItemRevision childComponentItemRevision = childBomLine.getItemRevision();
				String itemIdString=childComponentItemRevision.getProperty("item_id");
				String categoryString=childBomLine.getProperty("bl_occ_d9_Category").trim();
				String plantString=childBomLine.getProperty("bl_occ_d9_Plant").trim();
				String lineIdString=CommonTools.md5Encode(itemIdString+categoryString+plantString);
				if(childBomLine.isSubstitute()) {
					continue;
				}
				List<VariableBOMBean> newChildsBeans=newBean.getChild();
				int f=0;
				for(VariableBOMBean nb:newChildsBeans) {
					      if(nb.isSub()) {
						    continue;
					      }
					 if(nb.getLineId().equalsIgnoreCase(lineIdString)) {
						if(seriesMap.get(nb.getItemRevUid())!=null) {
							 f=1;
							 if(nb.getLevel().intValue()<2) {
							    saveData(childBomLine,nb,seriesMap);
							 }
						}else if(nb.getQty()!=null&&(!"".equalsIgnoreCase(nb.getQty().trim()))&&Float.parseFloat(nb.getQty())>0) {
							 f=1;
							 childBomLine.setProperty("bl_quantity", ""+nb.getQty());//修改 	
							 childBomLine.setProperty("bl_occ_d9_Plant", ""+nb.getPlant());//修改 
							 childBomLine.setProperty("bl_occ_d9_Category", ""+nb.getCategory().trim());//修改 
							 
							 childBomLine.setProperty("bl_occ_d9_Remark", ""+nb.getRemark().trim());//修改 
							 childBomLine.setProperty("bl_occ_d9_TorqueIn", ""+nb.getTorqueIn().trim());//修改 
							 childBomLine.setProperty("bl_occ_d9_TorqueOut", ""+nb.getTorqueOut().trim());//修改 
							 
							 if(nb.getLevel().intValue()<2) {
							    saveData(childBomLine,nb,seriesMap);
							 }
						}
					}				
				 }
				
				if(f==0) {//刪除
					childBomLine.cut();
				}	
			}
			
			List<VariableBOMBean> newChildsBeans=newBean.getChild();
			for(VariableBOMBean nb:newChildsBeans) {
				if(nb.isSub()) {
					continue;
				}
				int f=0;
				for(TCComponentBOMLine childBomLine:lines ) {								
					TCComponentItemRevision childComponentItemRevision = childBomLine.getItemRevision();
					String itemIdString=childComponentItemRevision.getProperty("item_id");
					String categoryString=childBomLine.getProperty("bl_occ_d9_Category").trim();
					String plantString=childBomLine.getProperty("bl_occ_d9_Plant").trim();
					String lineIdString=CommonTools.md5Encode(itemIdString+categoryString+plantString);
					if(nb.getLineId().equalsIgnoreCase(lineIdString)) {
						f=1;
						break;
					}
				}
				if(f==0) {//新增
					String uid = nb.getItemRevUid();
					if(nb.getQty()==null||nb.getQty().trim().equalsIgnoreCase("")) {
						continue;
					}
					TCComponentItemRevision itemRev = (TCComponentItemRevision) session.getComponentManager().getTCComponent(uid);
					TCComponentBOMLine childBomLine=bomLine.add(itemRev.getItem(), itemRev, null, false);
					
					childBomLine.setProperty("bl_quantity", ""+nb.getQty());//
					childBomLine.setProperty("bl_occ_d9_Plant", ""+nb.getPlant());//修改 
					childBomLine.setProperty("bl_occ_d9_Category", ""+nb.getCategory().trim());//修改 
					
					childBomLine.setProperty("bl_occ_d9_Remark", ""+nb.getRemark().trim());//修改 
					childBomLine.setProperty("bl_occ_d9_TorqueIn", ""+nb.getTorqueIn().trim());//修改 
					childBomLine.setProperty("bl_occ_d9_TorqueOut", ""+nb.getTorqueOut().trim());//修改 
					
					List<VariableBOMBean>  subsBeans=nb.getSubList();
					if(subsBeans!=null) {
					for(VariableBOMBean sb:subsBeans) {
						TCComponentItemRevision sbItemRev = (TCComponentItemRevision) session.getComponentManager().getTCComponent(sb.getItemRevUid());
						childBomLine.add(sbItemRev.getItem(), sbItemRev, null, true);
					}
					}
					if(nb.getLevel().intValue()<2) {
					    saveData(childBomLine,nb,seriesMap);
					}
					
				}
			}	
		}else {
			List<VariableBOMBean> newChildsBeans=newBean.getChild();			
			for(VariableBOMBean nb:newChildsBeans) {
				String uid = nb.getItemRevUid();
				if(nb.getQty()==null||nb.getQty().trim().equalsIgnoreCase("")) {
					continue;
				}
				TCComponentItemRevision itemRev = (TCComponentItemRevision) session.getComponentManager().getTCComponent(uid);
				TCComponentBOMLine childBomLine=bomLine.add(itemRev.getItem(), itemRev, null, false);
				childBomLine.setProperty("bl_quantity", ""+nb.getQty());//
				childBomLine.setProperty("bl_occ_d9_Plant", ""+nb.getPlant());//修改 
				childBomLine.setProperty("bl_occ_d9_Category", ""+nb.getCategory().trim());//修改 
				
				childBomLine.setProperty("bl_occ_d9_Remark", ""+nb.getRemark().trim());//修改 
				childBomLine.setProperty("bl_occ_d9_TorqueIn", ""+nb.getTorqueIn().trim());//修改 
				childBomLine.setProperty("bl_occ_d9_TorqueOut", ""+nb.getTorqueOut().trim());//修改 
				
				List<VariableBOMBean>  subsBeans=nb.getSubList();
				if(subsBeans!=null) {
				for(VariableBOMBean sb:subsBeans) {
					TCComponentItemRevision sbItemRev = (TCComponentItemRevision) session.getComponentManager().getTCComponent(sb.getItemRevUid());
					childBomLine.add(sbItemRev.getItem(), sbItemRev, null, true);
				}
				}
				if(nb.getLevel().intValue()<2) {
					saveData(childBomLine,nb,seriesMap);
				}
			}
		}	
	
	}

	/**
	 * 添加主料
	 * 
	 * @param bomLine
	 * @param bean
	 * @throws TCException
	 */
	private TCComponentBOMLine addChild(TCComponentBOMLine bomLine, VariableBOMBean bean) throws TCException {
		String uid = bean.getItemRevUid();
		TCComponentItemRevision itemRev = (TCComponentItemRevision) session.getComponentManager().getTCComponent(uid);
		TCComponentBOMLine childBOMLine = bomLine.add(itemRev.getItem(), itemRev, null, false);
//		childBOMLine.setProperties(getProps(bean));
		return childBOMLine;
	}

	/**
	 * 添加替代料
	 * 
	 * @param list
	 * @param bomLine
	 * @throws TCException
	 */
	private void addSub(TCComponentBOMLine bomLine, VariableBOMBean bean) throws TCException {
		List<VariableBOMBean> filterSubList = filterSubList(bean);
		if (CollUtil.isEmpty(filterSubList)) {
			return;
		}
		for (VariableBOMBean subBean : filterSubList) {
			String uid = subBean.getItemRevUid();
			TCComponentItemRevision subItemRev = (TCComponentItemRevision) session.getComponentManager()
					.getTCComponent(uid);
			bomLine.add(subItemRev.getItem(), subItemRev, null, true);
		}
	}

	/**
	 * 过滤替代料集合记录
	 * 
	 * @param bean
	 * @return
	 */
	private List<VariableBOMBean> filterSubList(VariableBOMBean bean) {
		List<VariableBOMBean> subList = bean.getSubList();
		if (CollUtil.isEmpty(subList)) {
			return null;
		}
		subList.removeIf(subBean -> !subBean.isAdd()); // 移除添加标识不是true, 代表不是新增的替代料
		return subList;
	}

	/**
	 * 获取属性值集合
	 * 
	 * @param bean
	 * @return
	 */
	private Map<String, String> getProps(VariableBOMBean bean) {
		Map<String, String> map = new HashMap<String, String>();
		if (bean.getQty() != null) {
			map.put(MatrixBOMConstant.BL_QUANTITY, bean.getQty() + "");
		}
		return map;
	}

	/**
	 * 核对系列BOM零件是否存在产品BOM零件清单中
	 * 
	 * @param rootBean
	 * @param list
	 */

	private void checkSeriesExist(VariableBOMBean rootBean, List<String> list) {
		boolean anyMatch = list.stream().anyMatch(uid -> uid.equals(rootBean.getItemRevUid()));
		if (anyMatch) {
//			rootBean.setExistProductBOM(true);
		}

		List<VariableBOMBean> subList = rootBean.getSubList();
		if (CollUtil.isNotEmpty(subList)) {
			for (VariableBOMBean subBean : subList) {
				boolean match = list.stream().anyMatch(subUid -> subUid.equals(subBean.getItemRevUid()));
				if (match) {
//					subBean.setExistProductBOM(true);
				}
			}
		}

		List<VariableBOMBean> childs = rootBean.getChild();
		if (CollUtil.isEmpty(childs)) {
			return;
		}

		for (VariableBOMBean child : childs) {
			checkSeriesExist(child, list);
		}
	}

	/**
	 * 获取SKU对象版本
	 * 
	 * @param productLineItemRev
	 * @return
	 * @throws TCException
	 */

	private TCComponentItemRevision getSeriesItemRev(TCComponentItemRevision productLineItemRev) throws TCException {
		TCComponent[] relatedComponents = productLineItemRev
				.getRelatedComponents(MatrixBOMConstant.D9_HASVARIANTHOLDER_REL);
		if (ArrayUtil.isEmpty(relatedComponents)) {
			return null;
		}

		List<TCComponent> list = Convert.convert(new TypeReference<List<TCComponent>>() {
		}, relatedComponents);
		Optional<TCComponent> findAny = list.stream().filter(e -> {
			try {
				if (e instanceof TCComponentItemRevision) {
					return true;
				}
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			return false;
		}).findAny();

		if (findAny.isPresent()) {
			return (TCComponentItemRevision) findAny.get();
		}

		return null;
	}



	public ExecutorService getEs() {
		return es;
	}

	public void setEs(ExecutorService es) {
		this.es = es;
	}

	
	public static Map<String,String> downloadFile(TCComponentItemRevision itemRevision) throws TCException {
		Map<String,String> map = new HashMap<String, String>();
		String imageBinary = "";
		TCComponent[] components = itemRevision.getRelatedComponents("IMAN_specification");
		
		for (TCComponent tcComponent : components) {
			if (!(tcComponent instanceof TCComponentDataset)) {
				continue;
			}
			TCComponentTcFile[] tcfiles = ((TCComponentDataset) tcComponent).getTcFiles();
			if (tcfiles != null && tcfiles.length > 0) {
				String type = tcComponent.getType();
				//System.out.println("type=="+type);
				if("Image".equals(type) || "JPEG".equals(type) || "GIF".equals(type)) {
					String fileName = tcfiles[0].getProperty("original_file_name");
					System.out.println("fileName = " + fileName);
					
					ExportFilesOperation expTemp = new ExportFilesOperation((TCComponentDataset) tcComponent, tcfiles, MatrixBOMConstant.tempPath, null);
					expTemp.executeOperation();
				
					String picPath = MatrixBOMConstant.tempPath + "\\" + fileName;
					imageBinary = ProductLineBOMService.getImageBinary(picPath);
					map.put("base64Str", imageBinary);
					map.put("picPath",picPath);
				}
			}
		}
		return map;
	}
}
