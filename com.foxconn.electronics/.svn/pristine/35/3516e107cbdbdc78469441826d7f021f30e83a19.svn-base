package com.foxconn.electronics.prtL10ebom.ebomimport.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

import com.foxconn.decompile.util.ExcelUtil;
import com.foxconn.electronics.prtL10ebom.ebomimport.domain.BOMBean;
import com.foxconn.electronics.prtL10ebom.ebomimport.domain.MaterialBean;
import com.foxconn.tcutils.util.CommonTools;

import cn.hutool.json.JSONUtil;



public class ExcelParseTools {
	
	private static BOMBean rootBomBean = null;
	private static MaterialBean rootMaterialBean = null;
	
	public static void main(String[] args) {
		String fileName = "C:\\Users\\MW00333\\Desktop\\LNV_JHS_FPU_BOM_Ver0.8-20230829_1.xlsx";
		String logTxt = "C:\\Users\\MW00333\\Desktop\\Log.txt";
		long timeStart = System.currentTimeMillis();
		Workbook workbook = null;
		try {
			
			ExcelUtil excelUtil = new ExcelUtil();
			workbook = excelUtil.getLocalWorkbook(fileName);
			Sheet sheet = workbook.getSheetAt(4);
			
			parseExcelNew(sheet, excelUtil);
			
			String txtFile = generateTxtFile("C:\\Users\\MW00333\\Desktop", "Log");
			
			
			System.out.println(rootBomBean);
			String result = JSONUtil.toJsonPrettyStr(rootBomBean);
			
			write(txtFile, result);
			
			System.out.println(result);
			long timeEnd = System.currentTimeMillis();
			System.out.println("总共花费：" + (timeEnd - timeStart) + "ms");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (workbook != null) {				
				try {
					workbook.close();
				} catch (IOException e) {
					e.printStackTrace();
				}				
			}
		}
	}
	
	public static void parseExcel(List<List<Object>> list) {
		BOMBean rootBomBean = null;
		MaterialBean rootMaterialBean = null;
		for (int i = 0; i < list.size(); i++) {
			List<Object> rowList = list.get(i);
			Integer level = rowList.get(4) == null ? null : (Integer)rowList.get(4);
			if (CommonTools.isEmpty(level)) {
				continue;
			}
			
			if (level == 0) {
				rootBomBean = new BOMBean();
				rootBomBean.setLevel(level);
				
				rootMaterialBean = new MaterialBean();
				rootMaterialBean.setPartNumber(rowList.get(8) == null ? "" : (String)rowList.get(8));				
				rootMaterialBean.setEnDesc(rowList.get(9) == null ? "" : (String)rowList.get(9));
				rootMaterialBean.setChDesc(rowList.get(10) == null ? "" : (String)rowList.get(10));
				
				rootBomBean.setSelfMaterialBean(rootMaterialBean);
			}
			
			System.out.println(123);
		}
	}
	
	
	
 	public static void parseExcelNew(Sheet sheet, ExcelUtil excelUtil) {
		int count = sheet.getLastRowNum(); // 获取最后一行
		for (int i = 6; i <= count; i++) {
			Row row = sheet.getRow(i);
			if (CommonTools.isEmpty(row)) {
				continue;
			}
			if (CommonTools.isEmpty(row.getCell(3))) {
				continue;
			}
			
			Cell levelCell = row.getCell(4);
			String levelValue = excelUtil.getCellValue(levelCell);
			if (CommonTools.isEmpty(levelValue)) {
				continue;
			}
			
			BigDecimal bigDecimal = new BigDecimal(levelValue);
//			String plainString = bigDecimal.stripTrailingZeros().toPlainString();
//			System.out.println("==>> plainString: " + plainString);
			int levelIndex = Integer.valueOf(bigDecimal.stripTrailingZeros().toPlainString());
			System.out.println("==>> levelIndex: " + levelIndex);
			
			if (levelIndex == 0) {
				rootBomBean = new BOMBean();
				rootBomBean.setLevel(levelIndex);
				
				rootMaterialBean = new MaterialBean();		
				rootMaterialBean.setParentNumber(excelUtil.getCellValue(row.getCell(7)));				
				rootMaterialBean.setPartNumber(excelUtil.getCellValue(row.getCell(8)));				
				rootMaterialBean.setEnDesc(excelUtil.getCellValue(row.getCell(9)));
				rootMaterialBean.setChDesc(excelUtil.getCellValue(row.getCell(10)));
				
				rootBomBean.setSelfMaterialBean(rootMaterialBean);
			} else {
				if (levelIndex == 1) {
					System.out.println(123);
				}
				BOMBean bomBean = new BOMBean();
				bomBean.setLevel(levelIndex);
				
				MaterialBean matBean = new MaterialBean();
				matBean.setParentNumber(excelUtil.getCellValue(row.getCell(7)));
				matBean.setPartNumber(excelUtil.getCellValue(row.getCell(8)));				
				matBean.setEnDesc(excelUtil.getCellValue(row.getCell(9)));
				matBean.setChDesc(excelUtil.getCellValue(row.getCell(10)));
				
				bomBean.setSelfMaterialBean(matBean);
				
				recurse(rootBomBean, bomBean);
			}
		}
	}
 	
 	
 	private static void recurse(BOMBean parentBean, BOMBean bean) {
 		List<BOMBean> childList = parentBean.getChildList();
 		if (bean.getLevel().intValue() == 1) {
			childList.add(bean);
			return;
		}
 		if (CommonTools.isEmpty(childList)) {
			if ((parentBean.getLevel().intValue() + 1) == bean.getLevel().intValue() 
					&& parentBean.getSelfMaterialBean().getPartNumber().equals(bean.getSelfMaterialBean().getParentNumber())) {				
				childList.add(bean);
			}
		} else {
			BOMBean lastBean = getLastBean(childList, bean);
			if (lastBean != null) {
				lastBean.getChildList().add(bean);
				return;
			}
			
			for (BOMBean childBean : childList) {
				recurse(childBean, bean);
			}
		}
 		
 		
 	}
 	
 	
 	private static BOMBean getLastBean(List<BOMBean> list, BOMBean currentBean) {
 		BOMBean resultBean = null;
 		Optional<BOMBean> findAny = list.stream().filter(bean -> (bean.getLevel().intValue() + 1) == currentBean.getLevel().intValue() && 
 				bean.getSelfMaterialBean().getPartNumber().equals(currentBean.getSelfMaterialBean().getParentNumber())).findAny();
 		if (findAny.isPresent()) {
 			resultBean = findAny.get();
		}
 		
 		
// 		for (int i = list.size() - 1; i >= 0; i--) {
//			BOMBean bean = list.get(i);
//			if ((bean.getLevel().intValue() + 1) == level) {
//				resultBean = bean;
//				break;
//			}
//		}
 		
 		return resultBean;
 	}
 	
 	
 	/**
	 * 生成TXT文件
	 * 
	 * @param filePath 文件夹路径
	 * @param fileName 文件名
	 * @return
	 * @throws IOException
	 */
	public static String generateTxtFile(String dir, String fileName) {
		try {
			String txtFilePath = dir + "\\" + fileName + ".txt";
			File file = new File(txtFilePath);
			if (file.exists()) {
				file.delete();
			}
			file.createNewFile();
			return file.getAbsolutePath();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * 将内容写入到文件中
	 * 
	 * @param fileName
	 * @param content
	 */
	public static void write(String fileName, String content) {
		try {
			OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(fileName, true), "UTF-8");
			osw.write(content + "\r\n");
			osw.flush();
			osw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
