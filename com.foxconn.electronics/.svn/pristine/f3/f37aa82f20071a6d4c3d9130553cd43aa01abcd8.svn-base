package com.foxconn.electronics.login;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;

import com.foxconn.tcutils.util.CommonTools;
import com.foxconn.tcutils.util.TCUtil;
import com.teamcenter.rac.aif.AbstractAIFUIApplication;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.aif.kernel.AIFSessionManager;
import com.teamcenter.rac.aif.kernel.InterfaceAIFComponent;
import com.teamcenter.rac.aifrcp.AIFUtility;
import com.teamcenter.rac.common.create.BOCreateDefinitionFactory;
import com.teamcenter.rac.common.create.CreateInstanceInput;
import com.teamcenter.rac.common.create.IBOCreateDefinition;
import com.teamcenter.rac.common.create.ICreateInstanceInput;
import com.teamcenter.rac.common.create.SOAGenericCreateHelper;
import com.teamcenter.rac.common.taskpane.IOpenItemService.OpenComponent;
import com.teamcenter.rac.common.taskpane.OpenItemService;
import com.teamcenter.rac.issuemanager.services.IMOpenService;
import com.teamcenter.rac.issuemanager.ui.issuehome.IssueHomePseudoFolder;
import com.teamcenter.rac.issuemanager.views.IssueHome;
import com.teamcenter.rac.kernel.TCAIEPersistentConnService;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentDataset;
import com.teamcenter.rac.kernel.TCComponentFolder;
import com.teamcenter.rac.kernel.TCComponentICO;
import com.teamcenter.rac.kernel.TCComponentIssueReportRevision;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCComponentManager;
import com.teamcenter.rac.kernel.TCComponentQuery;
import com.teamcenter.rac.kernel.TCComponentTask;
import com.teamcenter.rac.kernel.TCComponentUser;
import com.teamcenter.rac.kernel.TCComponentWorkContext;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCSession;
import com.teamcenter.rac.services.IOpenService;
import com.teamcenter.services.rac.issuemanagement.IssueManagementService;
import com.teamcenter.services.rac.issuemanagement._2010_04.IssueManagement;
import com.teamcenter.services.rac.issuemanagement._2010_04.IssueManagement.GetIssueListInput;

public class MyJobListHandler extends AbstractHandler {
	public AbstractAIFUIApplication app;
	public TCSession session = null;
	public String OtherName = "其他 Issues";
	public String JobName = "要执行的 Issues";

	@Override
	public Object execute(ExecutionEvent arg0) throws ExecutionException {
		System.out.println("11111111111111");
		
		app = AIFUtility.getCurrentApplication();
		session = (TCSession) app.getSession();
		OSSUserPojo userPojo = UserLoginSecond.getOSSUserInfo();
		String nickname = "apadmin";
		String name_no = "apadmin (apadmin) Issues";
		if(userPojo!=null) {
			nickname = userPojo.getNickname();
			String emp_no = userPojo.getEmp_no();
			System.out.println("nickname = "+nickname);
			System.out.println("emp_no = "+emp_no);
			
			name_no = emp_no+"("+nickname+") Issues";
		}
		
		try {
			ArrayList<TCComponentIssueReportRevision> jobList = new ArrayList<TCComponentIssueReportRevision>();
			ArrayList<TCComponentIssueReportRevision> otherList = new ArrayList<TCComponentIssueReportRevision>();
			
			TCComponent[] executeQuery = TCUtil.executeQuery(session, "__find_my_issue_reports",
					new String[] {"owning_user.user_id" }, new String[] { "$USERID" });
			if (executeQuery != null && executeQuery.length > 0) {
				for (int i = 0; i < executeQuery.length; i++) {
					
					if(executeQuery[i] instanceof TCComponentIssueReportRevision) {
						TCComponentIssueReportRevision issue = (TCComponentIssueReportRevision) executeQuery[i];
						String property = issue.getProperty("object_string");
						System.out.println("property = "+property);
						jobList.add(issue);
					}
				}
			}
			
			
			TCComponent userFolder = getMyIssuesbox(name_no);
			TCComponent jobFolder = null;
			TCComponent otherFolder = null;
			if(userFolder == null) {
				userFolder = createTaskInbox(session , "Folder",name_no);
				jobFolder = createTaskInbox(session , "Folder",JobName);
				otherFolder = createTaskInbox(session , "Folder",OtherName);
				userFolder.add("contents", jobFolder);
				userFolder.add("contents", otherFolder);
			} else {
				AIFComponentContext[] children = userFolder.getChildren();
				for (AIFComponentContext aif :children) {
					TCComponent folder = (TCComponent) aif.getComponent();
					String object_name = folder.getProperty("object_name");
					if(JobName.equals(object_name)) {
						jobFolder = folder;
					} else if(OtherName.equals(object_name)) {
						otherFolder = folder;
					}
				}
			}
			
			if(jobFolder!=null) {
				jobFolder.setRelated("contents", new TCComponent[] {});
			}
			if(otherFolder!=null) {
				otherFolder.setRelated("contents", new TCComponent[] {});
			}
			
			//打开我的工作列表
			IOpenService currentOpenService = AIFUtility.getCurrentOpenService();
			boolean open = currentOpenService.open(userFolder);
			if (open) {
				if(jobList !=null && jobList.size() > 0) {
					for (TCComponentIssueReportRevision component3:jobList) {
						jobFolder.add("contents", component3);
					}
				}
				
				if(otherList !=null && otherList.size() > 0) {
					for (TCComponentIssueReportRevision component3:otherList) {
						otherFolder.add("contents", component3);
					}
				}
			}
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		TCComponentUser user = session.getUser();
		OpenItemService openItemService = new OpenItemService();
		List<OpenComponent> openComponents = openItemService.getOpenComponents();
		
		IssueHome issueHome = new IssueHome();
		IssueHomePseudoFolder issueHomeFolder = issueHome.getIssueHomeFolder();
		
		IMOpenService impImOpenService = new IMOpenService();
		
		IssueManagementService issueManagementService = IssueManagementService.getService(session);
		//IssueManagement issueManagement = new IssueManagement();
		
		
		
		System.out.println("2222222222222222");
		
		return null;
	}
	
	


	/**
	 * 删除某个文件夹下的所有文件
	 * 
	 * @param delpath String
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @return boolean
	 */
	public static boolean deletefile(String delpath) throws Exception {
		try {
			File file = new File(delpath);
			// 当且仅当此抽象路径名表示的文件存在且 是一个目录时，返回 true
			if (!file.isDirectory()) {
				file.delete();
			} else if (file.isDirectory()) {
				String[] filelist = file.list();
				for (int i = 0; i < filelist.length; i++) {
					File delfile = new File(delpath + File.separator + filelist[i]);
					if (!delfile.isDirectory()) {
						delfile.delete();
						//System.out.println("【INFO】 " + delfile.getAbsolutePath() + "删除文件成功");
					} else if (delfile.isDirectory()) {
						deletefile(delpath + File.separator + filelist[i]);
					}
				}
			}

		} catch (FileNotFoundException e) {
			//System.out.println("【ERROR】 " + "deletefile() Exception:" + e.getMessage());
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public static String getFilePath(String foldName) {
		String tempPath = System.getProperty("java.io.tmpdir") + File.separator;
		File file = new File(tempPath + foldName);
		if (!file.exists()) {
			file.mkdirs();
		}
		return file.getAbsolutePath();
	}
	
	/**
	 * 解析流程审批邮件附件文本
	 * @return
	 * @throws Exception
	 */
	private boolean analysePublicMail(TCComponentItemRevision itemr,String parent_name,String nickname) throws Exception {
		String dir = getFilePath("publicMail");
		deletefile(dir); // 删除文件夹下面的所有文件		
		TCComponentDataset tcDataset = TCUtil.findDataSet(itemr, "IMAN_external_object_link", "publicMail.txt");
		if (CommonTools.isNotEmpty(tcDataset)) {
			String fullFilePath = TCUtil.downloadFile(tcDataset, dir, ".txt", "TEXT", "", false);
			List<String> contentLst = getContent(new File(fullFilePath), "UTF-8");
			return isContent(contentLst, parent_name, nickname);
		}
		return false;
	}
	
	
	/**
	 * 读取文件信息到List
	 * 
	 * @param fileNow
	 * @param strCharsetName
	 * @return
	 * @throws Exception
	 * @author:
	 */
	public static List<String> getContent(File fileNow, String strCharsetName) throws Exception {
		List<String> retLst = new ArrayList<String>();

		String strLine = null;
		BufferedReader br = null;
		FileInputStream fis = null;
		InputStreamReader isr = null;

		try {
			fis = new FileInputStream(fileNow);
			if (strCharsetName != null && strCharsetName.length() > 0) {
				isr = new InputStreamReader(fis, strCharsetName);
			} else {
				isr = new InputStreamReader(fis);
			}
			br = new BufferedReader(isr);
			while ((strLine = br.readLine()) != null) {
				retLst.add(strLine);
			}
		} finally {
			if (fis != null)
				fis.close();
			if (isr != null)
				isr.close();
			if (br != null)
				br.close();
		}

		return retLst;
	}
	
	
	public static boolean isContent(List<String> contentLst, String key, String user) {
		for (String content : contentLst) {
			String[] lineArr = content.split("=");
			if (2 == lineArr.length) {
				String lineKey = lineArr[0];
				if(lineKey.equals(key)) {
					System.out.println("lineKey ="+lineKey);
					String lineValue = lineArr[1];
					String[] pubUserArr = lineValue.split("##");
					if (2 == pubUserArr.length) {
						String[] realUserArr = pubUserArr[1].split("%%");
						if (1 == realUserArr.length || 2 == realUserArr.length) {
							String realUser = realUserArr[0];
							System.out.println("------------------->"+realUser);
							System.out.println("user------------------->"+user);
							if(user.equals(realUser)) {
								System.out.println("realUser = "+realUser);
								
								return true;
							}
						}
					}
				}
			}
		}
		
		return false;
	}

	
	
	 /**
     * 創建 TaskInbox
     * 
     * @param session
     * @param type
     * @param name
     * @return
     */
    public static TCComponent createTaskInbox(TCSession session, String type, String name)
    {
        List<ICreateInstanceInput>iputList = new ArrayList<>();
        IBOCreateDefinition createDefinition = BOCreateDefinitionFactory.getInstance().getCreateDefinition(session, type);
        CreateInstanceInput createInstanceInput = new CreateInstanceInput(createDefinition);
        createInstanceInput.add("object_name", name);
        iputList.add(createInstanceInput);
        List<TCComponent> comps = null;
        TCComponent folder = null;
        try
        {
            comps = SOAGenericCreateHelper.create(session, createDefinition, iputList);
            folder = (TCComponent)comps.get(0);
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return folder;
    }
    
    
    public TCComponent getMyIssuesbox(String name) throws Exception {
    	TCComponent folderComponent = null;
    	
    	TCComponent[] executeQuery = TCUtil.executeQuery(session, "常规...",
				new String[] { "object_name","object_type","owning_user.user_id" }, new String[] { name,"Folder","$USERID" });
		if (executeQuery != null && executeQuery.length > 0) {
			folderComponent = executeQuery[0];
		}
		return folderComponent;
    }
    
}
