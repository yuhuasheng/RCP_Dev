package com.foxconn.electronics.L10Ebom.editor;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.ColumnViewer;
import org.eclipse.jface.viewers.ComboBoxViewerCellEditor;
import org.eclipse.jface.viewers.EditingSupport;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TextCellEditor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.TableItem;

import com.foxconn.electronics.L10Ebom.combox.MyComboBoxViewerCellEditor;
import com.foxconn.electronics.L10Ebom.constant.ApplyFormConstant;
import com.foxconn.electronics.L10Ebom.domain.EBOMApplyRowBean;
import com.foxconn.electronics.L10Ebom.util.TableTools;
import com.foxconn.tcutils.util.TCPropertes;

public class MyEditingSupport extends EditingSupport {	
	
	private TableViewer tv;
	private Composite allComposite = null;
	private String tablePropName = null;
	private String title;
	private int index;
	private String columnName;
	private List<String> editorControllerList = null;
	private String groupName = null;
	private TableItem currentTableItem = null; // 当前table行
	private ComboBoxViewerCellEditor finishTypeCombox = null;
	private ComboBoxViewerCellEditor yesNoCombox = null;
	private ComboBoxViewerCellEditor semiTypeCombox = null;
	
	public MyEditingSupport(ColumnViewer viewer, Composite allComposite, String tablePropName, String title, int index, String columnName, List<String> editorControllerList, String groupName) {
		super(viewer);
		this.tv = (TableViewer) viewer;
		this.allComposite = allComposite;
		this.tablePropName = tablePropName;
		this.title = title;
		this.index = index;		
		columnName = columnName.replace("*", "").replace(" ", "");
		this.columnName = columnName;
		this.editorControllerList = editorControllerList;
		this.groupName = groupName;
		if (columnName.equals(ApplyFormConstant.FINISHTYPE)) {
			finishTypeCombox = new MyComboBoxViewerCellEditor((Composite) getViewer().getControl(), SWT.READ_ONLY);
			finishTypeCombox.setLabelProvider(new LabelProvider());
			finishTypeCombox.setContentProvider(new ArrayContentProvider());
			finishTypeCombox.setInput(ApplyFormConstant.FINISHTYPELOV);
		} else if (columnName.equals(ApplyFormConstant.ISNEWPKGBOM) || columnName.equals(ApplyFormConstant.ISNEWPCBA)) {
			yesNoCombox = new MyComboBoxViewerCellEditor((Composite) getViewer().getControl(), SWT.READ_ONLY);
			yesNoCombox.setLabelProvider(new LabelProvider());
			yesNoCombox.setContentProvider(new ArrayContentProvider());
			yesNoCombox.setInput(ApplyFormConstant.YESNOLOV);
		} else if (columnName.equals(ApplyFormConstant.SEMITYPE)) {
			semiTypeCombox = new MyComboBoxViewerCellEditor((Composite) getViewer().getControl(), SWT.READ_ONLY);
			semiTypeCombox.setLabelProvider(new LabelProvider());
			semiTypeCombox.setContentProvider(new ArrayContentProvider());
			semiTypeCombox.setInput(ApplyFormConstant.SEMITYPELOV);
		}
	}
	
	
	@Override
	protected boolean canEdit(Object obj) {		
		if (index == 0) {
			return false;
		}		
		
		try {
			EBOMApplyRowBean bean = (EBOMApplyRowBean) obj;
			Field[] fields = bean.getClass().getDeclaredFields();
			List<Field> fieldList = new ArrayList<Field>(Arrays.asList(fields));
			List<Field> resultList = new ArrayList<Field>();
			fieldList.removeIf(field -> field.getAnnotation(TCPropertes.class) == null);
			for (Field field : fieldList) {
				field.setAccessible(true);
				TCPropertes tcProp = field.getAnnotation(TCPropertes.class);
				int cell = tcProp.cell();
				if (index == cell) {
					resultList.add(field);
				}				
			}
			
			Optional<Field> findAny = resultList.stream().filter(field -> field.getType() == boolean.class).findAny();
			if (findAny.isPresent()) {
				return (boolean) findAny.get().get(bean);
			} else {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return true;
	}
	
	@Override
	protected CellEditor getCellEditor(Object obj) {
		if (columnName.equals(ApplyFormConstant.FINISHTYPE)) {
			return finishTypeCombox;
		} else if (columnName.equals(ApplyFormConstant.ISNEWPKGBOM) || columnName.equals(ApplyFormConstant.ISNEWPCBA)) {
			return yesNoCombox;
		} else if (columnName.equals(ApplyFormConstant.SEMITYPE)) {
			return semiTypeCombox;
		}
		return new TextCellEditor((Composite) getViewer().getControl(), SWT.NONE);
	}
	
	@Override
	protected Object getValue(Object obj) {
		currentTableItem = tv.getTable().getSelection()[0];
		return tv.getTable().getSelection()[0].getText(index);
	}
	
	@Override
	protected void setValue(Object obj, Object obj1) {
		String value = obj1.toString().trim();
		currentTableItem.setText(index, value);
		EBOMApplyRowBean currentData = (EBOMApplyRowBean) currentTableItem.getData();
		TableTools.updateData(currentData, index, value);		
	}
	
	
	
}
