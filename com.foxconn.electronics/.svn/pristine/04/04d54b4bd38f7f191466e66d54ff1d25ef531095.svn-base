package com.foxconn.electronics.prtL10ebom.ebomimport.dialog;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.ShellAdapter;
import org.eclipse.swt.events.ShellEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowData;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;

import com.foxconn.decompile.util.ExcelUtil;
import com.foxconn.electronics.prtL10ebom.ebomimport.domain.BOMBean;
import com.foxconn.electronics.prtL10ebom.ebomimport.domain.CellBean;
import com.foxconn.electronics.prtL10ebom.ebomimport.domain.MaterialBean;
import com.foxconn.electronics.prtL10ebom.ebomimport.domain.PartQtyBean;
import com.foxconn.electronics.prtL10ebom.ebomimport.rightbtn.MyActionGroup;
import com.foxconn.electronics.prtL10ebom.ebomimport.util.ExcelParseTools;
import com.foxconn.tcutils.util.CommonTools;
import com.foxconn.tcutils.util.TCPropertes;
import com.foxconn.tcutils.util.TCUtil;
import com.simple.traditionnal.util.S2TTransferUtil;
import com.teamcenter.rac.aif.AbstractAIFUIApplication;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.aif.kernel.InterfaceAIFComponent;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentBOMLine;
import com.teamcenter.rac.kernel.TCComponentBOMWindow;
import com.teamcenter.rac.kernel.TCComponentFolder;
import com.teamcenter.rac.kernel.TCComponentItem;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCSession;
import com.teamcenter.rac.util.Registry;
import com.teamcenter.schemas.soa._2006_03.exceptions.ServiceException;

import cn.hutool.json.JSONUtil;

public class L10EBOMImportDialog extends Dialog {	
	
	private AbstractAIFUIApplication app = null;
	private TCSession session = null;
	private Shell shell = null;
	private Shell parentShell = null;
	private Text filePathText = null;
	private Button chooseBtn = null;
	private Button importButton = null;
	private Label label = null;
	private Combo combo = null;	
	private StyledText styledText = null;
	private StyleRange infoStyle = null;
	private StyleRange warnStyle = null;
	private StyleRange errorStyle = null;
	private Composite statusBar = null;
	private Label status = null;
	private ProgressBar progressBar = null;
	private Composite progressComposite = null;
	private Registry reg = null;
	private List<String> comboList = null;
	private String comboTextValue = null;
	private boolean isRunning = false;
	private Workbook workbook = null;
	private ExcelParseTools parseTools = null;
	private String filePath = null;
	private TCComponentFolder selectFolder = null;	
	private static final String D9_VirtualPart = "D9_VirtualPart";
	private static final String D9_FinishedPart = "D9_FinishedPart";
	private static final String D9_CommonPart = "D9_CommonPart";
	private static final String D9_PCA_Part = "D9_PCA_Part";
	private static final String EDAComPart = "EDAComPart";
	private static final String Bulk_Part = "Bulk_Part";
	private static final String FPU_Part = "FPU Part";
	private static final String Assembly = "Assembly";
	private static final String Packing = "Packing";
	private static final String PCA = "PCA";
	private static final String Others = "Others";
	private static final String Folder = "Folder";
	private static final String Contents = "contents";
	private static final String ObjectName = "object_name";
	private static final String ItemId = "item_id";	
	private static final String BL_quantity = "bl_quantity";
	private static final String BL_line_object = "bl_line_object";
	
	private Map<String, String> ItemMap = new HashMap<String, String>() {{
		put("FNNNN-65NNN", D9_FinishedPart);
		put("FNNNN-61NNN", D9_PCA_Part);
	}};
	
	private Map<String, String> FolderMap = new HashMap<String, String>() {{
		put("FNNNN-65NNN", Bulk_Part);
		put("FNNNN-64NNN", FPU_Part);
		put("FNNNN-60NNN", Assembly);
		put("FNNNN-7NNNN", Packing);
		put("FNNNN-81NNN", Packing);
		put("FNNNN-82NNN", Packing);
		put("FNNNN-83NNN", Packing);
		put("FNNNN-61NNN", PCA);
	}};
	
	
	public L10EBOMImportDialog(AbstractAIFUIApplication app, Shell parentShell) {
		super(parentShell);
		this.app = app;
		this.session = (TCSession) this.app.getSession();
		this.parentShell = parentShell;
		reg = Registry.getRegistry("com.foxconn.electronics.prtL10ebom.prtL10ebom");
		
		parseTools = new ExcelParseTools();
		
		infoStyle = new StyleRange();
		infoStyle.foreground = SWTResourceManager.getColor(SWT.COLOR_DARK_GREEN);
		
		warnStyle = new StyleRange();				
		warnStyle.foreground = SWTResourceManager.getColor(SWT.COLOR_DARK_YELLOW);
		
		errorStyle = new StyleRange();				
		errorStyle.foreground = SWTResourceManager.getColor(SWT.COLOR_RED);
		
		selectFolder = getSelectFolder(); // 获取当前选中的文件夹
		initUI();
	}
	
	
	private void initUI() {
		shell = new Shell(parentShell, SWT.DIALOG_TRIM | SWT.MAX | SWT.RESIZE | SWT.CLOSE);
		shell.setSize(700, 600);
		shell.setText(reg.getString("L10EBOMImport.TITLE"));
		shell.setLayout(new GridLayout(1, false));
		TCUtil.centerShell(shell);
		
		Image image = getDefaultImage();
		if (CommonTools.isNotEmpty(image)) {
			shell.setImage(image);
		}
		
		GridData topData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
		topData.grabExcessHorizontalSpace = true;
		
		Composite topComposite = new Composite(shell, SWT.NONE);
		topComposite.setLayout(new GridLayout(5, false));
		topComposite.setLayoutData(topData);
		
		label = new Label(topComposite, SWT.NONE);
		label.setText(reg.getString("Combo.LABEL"));
		
		GridData gridDataText = new GridData();
		gridDataText.widthHint = 100;
		
		combo = new Combo(topComposite, SWT.READ_ONLY); // 定义一个只读的下拉框
		combo.setLayoutData(gridDataText);
		
		
		GridData filePathData = new GridData(GridData.FILL_HORIZONTAL);
		
		filePathText = new Text(topComposite, SWT.SINGLE | SWT.BORDER);
		filePathText.setEnabled(false); // 设置不可编辑
		filePathText.setLayoutData(filePathData);
		
		chooseBtn = new Button(topComposite, SWT.NONE);
		chooseBtn.setText(reg.getString("ChooseBtn.LABEL"));
		
		styledText = new StyledText(shell, SWT.READ_ONLY | SWT.MULTI |  SWT.V_SCROLL | SWT.H_SCROLL | SWT.BORDER);
		styledText.setLayoutData(new GridData(GridData.FILL_BOTH));
		
		MyActionGroup actionGroup = new MyActionGroup(styledText, reg);
		actionGroup.fillContextMenu(new MenuManager());
		
//		statusBar = new Composite(shell, SWT.NONE);
//		statusBar.setLayout(new GridLayout(2, false));
//		statusBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
//		
//		status = new Label(statusBar, SWT.NONE);
//		status.setText(reg.getString("ProgressBar1.TITLE"));
//		status.setVisible(false);
		
//		progressComposite = new Composite(shell, SWT.NONE);
		
		statusBar = new Composite(shell, SWT.NONE);
		statusBar.setLayout(new GridLayout(2, false));
		statusBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		
		status = new Label(statusBar, SWT.NONE);		
		
		Composite bottomBtnComposite = new Composite(shell, SWT.NONE);
		GridData bottomBtndata = new GridData(GridData.FILL_HORIZONTAL);
		bottomBtndata.horizontalAlignment = GridData.CENTER; 		
		bottomBtnComposite.setLayoutData(bottomBtndata);
		
		RowLayout bottomRowLayout = new RowLayout(); 
		bottomRowLayout.spacing = 15;
		
		bottomBtnComposite.setLayout(bottomRowLayout);
		
		RowData bottomBtnRowData = new RowData();
		bottomBtnRowData.width = 60;
		bottomBtnRowData.height = 30;
		
		importButton = new Button(bottomBtnComposite, SWT.NONE);
		importButton.setText(reg.getString("ImportBtn.LABEL"));
		importButton.setLayoutData(bottomBtnRowData);
		importButton.setEnabled(false); // 设置不可点击		
		status.setVisible(false); // 界面加载设置不显示	
		
		addListener();		
				
		shell.open();
		shell.layout();

		Display display = shell.getDisplay();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}
	
	
	private void setUpStatusBar(String statusName) {		
			if (!statusBar.isDisposed()) {
				status.setText(statusName);
				status.setVisible(true);
			}
			
			progressBar = new ProgressBar(statusBar, SWT.SMOOTH);
			progressBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
			progressBar.setMaximum(100);
			
			statusBar.layout();

	}

	
	private void updateProgressBarByLoadSheet() {

		new Thread(new Runnable() {
			private int progress = 0;
			private static final int INCREMENT = 10;
			private boolean flag = false; // 数据接口获取成功与否接口
			
			@Override
			public void run() {
				new Thread() {
					public void run() {	
						FileInputStream fis = null;
						try {
							fis = new FileInputStream(filePath);
							workbook = WorkbookFactory.create(fis);
							
							List<String> list = parseTools.getSheetNameList(workbook);
									
							if (CommonTools.isEmpty(list)) {
								TCUtil.errorMsgBox(reg.getString("SheetLoadingErr.MSG"), reg.getString("ERROR.MSG"));
								return;
							}
							
							comboList = new ArrayList<String>(list.size() + 1); 
							
							comboList.addAll(list);
							comboList.add(0, "--- 请选择 ---");	
							
							setComboValues(); // 设置sheet页名称下拉值
						} catch (IOException e) {
							e.printStackTrace();
						} finally {			
							if (CommonTools.isNotEmpty(fis)) {
								try {
									fis.close();
								} catch (IOException e) {
									e.printStackTrace();
								}
							}			
							if (CommonTools.isNotEmpty(workbook)) {
								try {
									workbook.close();
								} catch (IOException e) {
									e.printStackTrace();
								}
							}		
							
						}
						
						flag = true;						 						
					}
				}.start();
				
				while (progressBar != null && !progressBar.isDisposed()) {
					Display.getDefault().asyncExec(new Runnable() {
						@Override
						public void run() {
							if (flag) {
								if (!shell.isDisposed()) {
									status.setVisible(false);					    		
									filePathText.setText(filePath);
						    		progressBar.dispose(); // 销毁进度条组件
						    						
								}								
							}
							if (!progressBar.isDisposed()) {
								progressBar.setSelection((progress += INCREMENT) % (progressBar.getMaximum() + INCREMENT));
							}								
						}
					});
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}					
					
				}
			}
		}).start();
	
	}
	
	private void updateProgressBarByImport(String filePath) {
		new Thread(new Runnable() {
			private int progress = 0;
			private static final int INCREMENT = 10;
			private boolean finish = false; // 导入完成标识
			
			@Override
			public void run() {
				
				new Thread() {
					public void run() {
						TCUtil.setBypass(session);
						FileInputStream fis = null;
//						setRunningFlag(true);	
						TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 当前导入的Excel文件路径为: ") + filePath + " ************", styledText, infoStyle);
						TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始执行本次导入************"), styledText, infoStyle);
						try {
							fis = new FileInputStream(filePath);
							workbook = WorkbookFactory.create(fis);
							
							TCUtil.writeWarnLog(S2TTransferUtil.toTraditionnalString("************ 当前选中的sheet名称为:") + comboTextValue + " ************", styledText, infoStyle);
							Sheet sheet = workbook.getSheet(comboTextValue);
							
							TCUtil.writeInfoLog("====================================", styledText, infoStyle);	
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始校验sheet页 ************"), styledText, infoStyle);
							if (!parseTools.checkSheetTemplate(sheet)) {
								TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("************ 当前选中的sheet,模板不符合要求************"), styledText, errorStyle);
								throw new Exception(S2TTransferUtil.toTraditionnalString("************ 导入終止 ************"));
							}
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 校验sheet页完成************"), styledText, infoStyle);
							
							
							TCUtil.writeInfoLog("====================================", styledText, infoStyle);								
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始解析sheet页内容 ************"), styledText, infoStyle);
							List<CellBean> colIndexList = parseTools.getColIndex(sheet, null);
							
							List<String> skuList = parseTools.getSKUList(sheet, colIndexList);
							if (CommonTools.isEmpty(skuList)) {
								TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("************ 当前sheet页SKU单元格全部为空,无法执行下一步动作  ************"), styledText, errorStyle);
								throw new Exception(S2TTransferUtil.toTraditionnalString("************ 导入終止 ************"));
							}
							
							List<CellBean> qtyIndexList = parseTools.getColIndex(sheet, skuList);
							if (CommonTools.isEmpty(qtyIndexList)) {
								TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("************ 当前sheet页SKU没有匹配到Qty单元格,无法执行下一步  ************"), styledText, errorStyle);
								throw new Exception(S2TTransferUtil.toTraditionnalString("************ 导入終止 ************"));
							}
							
							Map<String, List<PartQtyBean>> retMap = new LinkedHashMap<String, List<PartQtyBean>>();
							
							List<String> errorList = new ArrayList<String>();
							
							parseTools.getPartBeanList(workbook, sheet, colIndexList, qtyIndexList, retMap, errorList);
							
							if (CommonTools.isNotEmpty(errorList)) {
								for (String str : errorList.stream().filter(CommonTools.distinctByKey(str -> str)).collect(Collectors.toList())) {
									TCUtil.writeErrorLog(str, styledText, errorStyle);
								}
								
								throw new Exception(S2TTransferUtil.toTraditionnalString("************ 导入終止 ************"));
							}
							
							List<BOMBean> totalList = parseTools.parseExcel(workbook, sheet, colIndexList, qtyIndexList, retMap);
							
							if (CommonTools.isEmpty(totalList)) {
								TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("************ 当前sheet页内容为空,无法执行下一步  ************"), styledText, errorStyle);
								throw new Exception(S2TTransferUtil.toTraditionnalString("************ 导入終止 ************"));
							}
							
							List<BOMBean> filterList = totalList.stream().filter(CommonTools.distinctByKey(bean -> bean.getSelfMaterialBean().getPartNumber())).collect(Collectors.toList());
							
//							Collections.sort(filterList);
							
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 完成解析sheet页内容 ************"), styledText, infoStyle);
							
							
							TCUtil.writeInfoLog("====================================", styledText, infoStyle);							
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始导入物料 ************"), styledText, infoStyle);
							createItem(filterList, totalList);
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 物料导入完成 ************"), styledText, infoStyle);
							
							TCUtil.writeInfoLog("====================================", styledText, infoStyle);	
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始搭建BOM ************"), styledText, infoStyle);
							List<BOMBean> rootList = totalList.stream().filter(bean -> CommonTools.isEmpty(bean.getSelfMaterialBean().getParentNumber())).collect(Collectors.toList());
							List<BOMBean> createList = totalList.stream().filter(bean -> CommonTools.isNotEmpty(bean.getSelfMaterialBean().getParentNumber())).collect(Collectors.toList());
							
							createBOM(createList);
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ BOM搭建完成 ************"), styledText, infoStyle);
							
							TCUtil.writeInfoLog("====================================", styledText, infoStyle);	
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始设置BOM用量 ************"), styledText, infoStyle);
							setQty(rootList, totalList);
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ BOM用量设置完成 ************"), styledText, infoStyle);
							
							TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 本次导入完成************"), styledText, infoStyle);
						} catch (Exception e) {
							e.printStackTrace();
							TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("************ 本次导入发生错误 ************"), styledText, errorStyle);							
							TCUtil.writeErrorLog(TCUtil.getExceptionMsg(e), styledText, errorStyle);	
						} finally {
							if (CommonTools.isNotEmpty(fis)) {
								try {
									fis.close();
								} catch (IOException e1) {
									e1.printStackTrace();
								}
							}			
							if (CommonTools.isNotEmpty(workbook)) {
								try {
									workbook.close();
								} catch (IOException e1) {
									e1.printStackTrace();
								}
							}
							
							finish = true;
							setRunningFlag(false);	
							TCUtil.closeBypass(session); // 关闭旁路
						}
						
					}
				}.start();
				
				while (progressBar != null && !progressBar.isDisposed()) {
					Display.getDefault().asyncExec(new Runnable() {
						
						@Override
						public void run() {
							if (finish) {
								status.setVisible(false);
								progressBar.dispose(); // 销毁进度条组件
							}
							
							if (!progressBar.isDisposed()) {
								progressBar.setSelection((progress += INCREMENT) % (progressBar.getMaximum() + INCREMENT));
							}
						}
					});
					
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}).start();
	}
	
	
	
 	private void addListener() {
		chooseBtn.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				filePath = TCUtil.openFileChooser(shell);
				if (CommonTools.isEmpty(filePath)) {
					return;
				}
				
				setUpStatusBar(reg.getString("ProgressBar1.TITLE"));
				updateProgressBarByLoadSheet();
								
			}
		});
		
		importButton.addSelectionListener(new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				String selectFilePath = filePathText.getText();
				setUpStatusBar(reg.getString("ProgressBar2.TITLE"));
				updateProgressBarByImport(selectFilePath);
			}
		});		
		
		shell.addShellListener(new ShellAdapter() {
			public void shellClosed(ShellEvent e) {
				if (isRunning) {
					MessageDialog.openWarning(getShell(), reg.getString("WARNING.MSG"), reg.getString("ImportWarn.MSG"));
					e.doit = false;
				} else {
					boolean flag = MessageDialog.openQuestion(getShell(), reg.getString("INFORMATION.MSG"), reg.getString("CloseTip.MSG"));
					System.out.println("==>> flag: " + flag);
					e.doit = flag == true;
					if (e.doit) {
						shell.dispose();
					}
					
				}
			}
		});
	
		combo.addSelectionListener(new SelectionAdapter() {			
			public void widgetSelected(SelectionEvent e) {
				Combo source = (Combo) e.getSource();
				comboTextValue = source.getText();
				System.out.println("==>> 当前下拉框选中值为: " + source.getText());
				if (!comboTextValue.equals(comboList.get(0)) && CommonTools.isNotEmpty(filePath)) { // 判断当前下拉框值是否为请选择并且文件路径不为空					
					importButton.setEnabled(true);
				} else if (comboTextValue.equals(comboList.get(0)) || CommonTools.isEmpty(filePath)) {
					importButton.setEnabled(false);
				}
			}
		});		
		
		styledText.addModifyListener(new ModifyListener() {
			
			@Override
			public void modifyText(ModifyEvent e) {
				styledText.setTopIndex(styledText.getLineCount() - 1);
			}
		});
 	}
	
 	/**
 	 * 创建零件
 	 * @param list
 	 * @throws Exception
 	 */
 	private void createItem(List<BOMBean> list, List<BOMBean> totalList) throws Exception {
 		for (BOMBean bean : list) {	
 			try {
 				TCComponentItemRevision itemRev = null;
 				MaterialBean matBean = bean.getSelfMaterialBean();
 				String partNum = matBean.getPartNumber();
 				Map<String, Object> ootbMap = new HashMap<String, Object>();
 				Map<String, String> itemRevCustMap = new HashMap<String, String>();
 				Map<String, String> itemCustMap = new HashMap<String, String>();
 				getPropMap(matBean, ootbMap, itemRevCustMap, itemCustMap);
 				
 				String foldName = getItemType(partNum, FolderMap, false);
 				TCComponent matchFolder = getMatchTCComponent(selectFolder, foldName);
 				if (CommonTools.isEmpty(matchFolder)) {
 					matchFolder = TCUtil.createFolder(session, Folder, foldName);
 					selectFolder.add(Contents, matchFolder);				
 				}
 				
 				TCComponentItem item = TCUtil.findItem(partNum);
 				if (CommonTools.isNotEmpty(item)) {
 					TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,料号: " + partNum + ", 物料已经存在TC中,无需创建"), styledText, infoStyle);
 				} else {
 					List<Map<String, Object>> createList = new ArrayList<Map<String,Object>>();
 					createList.add(ootbMap);
 					TCComponent[] createObjects = TCUtil.createObjects(session, getItemType(partNum, ItemMap, true), createList);
 					if (CommonTools.isEmpty(createObjects)) {
 						TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,料号: " + partNum + ",物料创建失败"), styledText, errorStyle);
 						continue;
 					} 

 					TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,料号: " + partNum + ",物料创建成功"), styledText, infoStyle);
 					
 					item = (TCComponentItem) createObjects[0]; 					
 				}
 				
 				item.setProperties(itemCustMap);
				itemRev = item.getLatestItemRevision();
				itemRev.setProperties(itemRevCustMap);
					
 				for (BOMBean e : totalList) {
 					MaterialBean selfMaterialBean = e.getSelfMaterialBean();
					if (selfMaterialBean.getParentNumber().equals(partNum)) {
						selfMaterialBean.setParentItemRev(itemRev);
					}
					
					if (selfMaterialBean.getPartNumber().equals(partNum)) {
						selfMaterialBean.setPartItemRev(itemRev);
					}
				}
 				
// 				Optional<BOMBean> findAny = totalList.stream().filter(e -> e.getSelfMaterialBean().getParentNumber().equals(partNum)).findAny();
// 				
// 				if (findAny.isPresent()) {
//					findAny.get().getSelfMaterialBean().setParentItemRev(itemRev);
//				}
 				
 				
 				
// 				Optional<BOMBean> findAny2 = totalList.stream().filter(e -> e.getSelfMaterialBean().getPartNumber().equals(partNum)).findAny();
// 				
// 				if (findAny2.isPresent()) {
//					findAny2.get().getSelfMaterialBean().setPartItemRev(itemRev);
//				}
 				
 				int length = 0;
 				TCComponent[] relatedComponents = matchFolder.getRelatedComponents(Contents);
 				if (CommonTools.isNotEmpty(relatedComponents)) {
 					length = relatedComponents.length;
 				}
 				
 				if (CommonTools.isEmpty(getMatchTCComponent(matchFolder, partNum))) {
 					matchFolder.add(Contents, item, length); // 将对象追加到文件夹末尾				
 				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new Exception(S2TTransferUtil.toTraditionnalString("第 " + bean.getSelfMaterialBean().getIndex() + " 行发生错误,错误信息如下:"+ e.getLocalizedMessage()));
			}
 			
		}
 	}

 	/**
 	 * 创建BOM
 	 * @param list
 	 * @throws Exception
 	 */
 	private void createBOM(List<BOMBean> list) throws Exception {
 		MaterialBean matBean = null;
 		String parentNum = null;
 		String partNum = null;
 		for (BOMBean bean : list) {
 			TCComponentBOMWindow window = null;
 			TCComponentBOMLine topLine = null;
			try {
				TCComponentItemRevision parentItemRev = null;
				TCComponentItemRevision partItemRev = null;
				matBean = bean.getSelfMaterialBean();
				parentNum = matBean.getParentNumber();
 				partNum = matBean.getPartNumber();
 				String qty = bean.getQty();
 	 			if (matBean.getIndex() == 37) {
 	 				System.out.println(123);
// 					break;
 				}
				parentItemRev = matBean.getParentItemRev();
 				if (CommonTools.isEmpty(parentItemRev)) {
 					TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,上阶料号: " + parentNum + ",在TC中不存在"), styledText, errorStyle);
 					continue;
				}
				
				partItemRev = matBean.getPartItemRev();
 				
 				window = TCUtil.createBOMWindow(session);
 				
				topLine = TCUtil.getTopBomline(window, parentItemRev);
				
				if (!checkBOMLineExist(topLine, partItemRev)) {
					TCComponentBOMLine bomLine = topLine.add(partItemRev.getItem(), partItemRev, null, false);
					TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,上阶料号: " + parentNum + ",添加料号: " + partNum + ",成功"), styledText, infoStyle);
				} else {
					TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,上阶料号: " + parentNum + ",已经存在料号: " + partNum + ", 无需重复添加"), styledText, infoStyle);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,上阶料号: " + parentNum + ", 料号: " + partNum + ",发生错误,错误信息如下:" 
										+ TCUtil.getExceptionMsg(e)), styledText, errorStyle);
				throw new Exception(e);
			} finally {
				if (CommonTools.isNotEmpty(window)) {
					window.save();
					window.close();
				}
			}
		} 		
 	}
 	
 	
 	/**
 	 * 设置用量
 	 * @param rootList
 	 * @param totalList
 	 * @throws TCException
 	 */
 	private void setQty(List<BOMBean> rootList, List<BOMBean> totalList) throws TCException {
 		MaterialBean matBean = null;
 		for (BOMBean bean : rootList) {
 			TCComponentBOMWindow window = null;
 			TCComponentBOMLine topLine = null;
 			TCComponentItemRevision itemRev = null;
 			try {
 				matBean = bean.getSelfMaterialBean();
 				itemRev = matBean.getPartItemRev();
 				
 				window = TCUtil.createBOMWindow(session);
 				
 				topLine = TCUtil.getTopBomline(window, itemRev);
 				
 				TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 开始设置料号:" + matBean.getPartNumber() + " BOM子阶用量 ************"), styledText, infoStyle);
 				recurseBOMLine(topLine, totalList);
 				TCUtil.writeInfoLog(S2TTransferUtil.toTraditionnalString("************ 料号:" + matBean.getPartNumber() + "设置BOM子阶用量完成 ************"), styledText, infoStyle);
			} catch (Exception e) {
				e.printStackTrace();
				TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("************ 料号:" + matBean.getPartNumber() + "设置BOM子阶用量出现错误,错误信息如下: ************" + TCUtil.getExceptionMsg(e)), styledText, errorStyle);
			} finally {
				if (CommonTools.isNotEmpty(window)) {
					window.save();
					window.close();
				}
			}
 		}
 	}
 	
 	private void recurseBOMLine(TCComponentBOMLine topLine, List<BOMBean> totalList) throws TCException {
 		if (topLine.parent() != null) {
 			TCComponent itemRev = topLine.getRelatedComponent(BL_line_object);
 			Optional<BOMBean> findAny = totalList.stream().filter(e -> {
 				MaterialBean selfMaterialBean = e.getSelfMaterialBean();
 				TCComponentItemRevision partItemRev = selfMaterialBean.getPartItemRev();
 				if (CommonTools.isNotEmpty(partItemRev)) {
					return partItemRev.getUid().equals(itemRev.getUid());
				}
 				return false;
 			}).findAny();
 			
 			if (findAny.isPresent()) {
				BOMBean bomBean = findAny.get();
				MaterialBean matBean = bomBean.getSelfMaterialBean();
				String qty = bomBean.getQty();
				if (CommonTools.isNotEmpty(qty)) {
					try {
						topLine.setProperty(BL_quantity, qty);
					} catch (Exception e) {
						e.printStackTrace();
						TCUtil.writeErrorLog(S2TTransferUtil.toTraditionnalString("第 " + matBean.getIndex() + " 行,料号: " + matBean.getPartNumber() + "设置用量失败," + TCUtil.getExceptionMsg(e)), styledText, errorStyle);
					}					
				}				
			}
		}
 		
 		AIFComponentContext[] children = topLine.getChildren();
 		if (CommonTools.isNotEmpty(children)) {
 			for (AIFComponentContext e : children) {
 				TCComponentBOMLine bomLine = (TCComponentBOMLine) e.getComponent();
 				recurseBOMLine(bomLine, totalList);
			} 			
		}
 	}
 	
 	
 	/**
 	 * 判断BOM是否已经存在
 	 * @param componentContext
 	 * @param itemRev
 	 * @return
 	 * @throws TCException 
 	 */
 	private boolean checkBOMLineExist(TCComponentBOMLine topLine, TCComponentItemRevision itemRev) throws TCException {
 		AIFComponentContext[] children = topLine.getChildren();
 		if (CommonTools.isEmpty(children)) {
			return false;
		}
 		return Stream.of(children).anyMatch(e -> {
 			try {
 				TCComponentBOMLine bomLine = (TCComponentBOMLine) e.getComponent();
 				TCComponent relatedComponent = bomLine.getRelatedComponent(BL_line_object);
 				return relatedComponent.getUid().equals(itemRev.getUid());
			} catch (Exception e1) {
				throw new RuntimeException(e1);
			}
 		});
 	}
 	
 	
 	private TCComponent getMatchTCComponent(TCComponent tcComponent, String name) throws TCException {
		tcComponent.refresh();
		TCComponent[] relatedComponents = tcComponent.getRelatedComponents("contents");
		Optional<TCComponent> findAny = Stream.of(relatedComponents).filter(component -> {
			try {				
				if (component instanceof TCComponentFolder) {					
					TCComponentFolder folder = (TCComponentFolder)component;
					return name.equalsIgnoreCase(folder.getProperty(ObjectName));
				} else if (component instanceof TCComponentItem) {
					TCComponentItem item = (TCComponentItem) component;
					return name.equalsIgnoreCase(item.getProperty(ItemId));
				}
			} catch (Exception e) {
				e.printStackTrace();
			}			
			return false;
		}).findAny();
		
		if (findAny.isPresent()) {
			return findAny.get();
		}
		
		return null;
	}
 	
 	
 	/**
 	 * 创建零组件
 	 * @param bean
 	 * @param ootbMap
 	 * @param custMap
 	 * @throws IllegalArgumentException
 	 * @throws IllegalAccessException
 	 */
 	private void getPropMap(MaterialBean bean, Map<String, Object> ootbMap, Map<String, String> itemRevCustMap, Map<String, String> itemCustMap) throws IllegalArgumentException, IllegalAccessException {
 		System.out.println("start -->>  getTCPropMap");
 		Field[] fields = bean.getClass().getDeclaredFields();
		List<Field> fieldList = new ArrayList<Field>(Arrays.asList(fields));
		fieldList.removeIf(field -> field.getAnnotation(TCPropertes.class) == null);
		for (Field field : fieldList) {
			field.setAccessible(true);
			TCPropertes tcProp = field.getAnnotation(TCPropertes.class);
			String tcPropName = tcProp.tcProperty();
			Object o = field.get(bean);
			if (tcPropName.startsWith("d9_")) {
				itemRevCustMap.put(tcPropName, (String) o);
			} else {
				ootbMap.put(tcPropName, o);
				itemCustMap.put(tcPropName, (String) o);
			}
		}		
 	}
 	
 	/**
 	 * 获取对象类型
 	 * @param itemId
 	 * @param index
 	 * @return
 	 */
 	private String getItemType(String itemId, Map<String, String> map, boolean createFlag) {
 		String value = null;
 		String codeRule = "";
 		String[] split = itemId.split("-");
 		String str1 = split[0];
 		String str2 = split[1];
 		
 		str1 = str1.replace(str1.subSequence(1, 5), "NNNN");
 		str2 = str2.replace(str2.subSequence(2, 5), "NNN");
 		codeRule = str1 + "-" + str2;
 		value = map.get(codeRule);
 		if (CommonTools.isEmpty(value)) {
 			str2 = str2.replace(str2.subSequence(1, 5), "NNNN");
 			codeRule = str1 + "-" + str2;
 			value = map.get(codeRule);
 			if (CommonTools.isEmpty(value)) {
 				if (createFlag) {
 					value = D9_CommonPart;
				} else {
					value = Others;
				} 				
			}
		} 
 		
 		return value; 		
 	} 	
 	
 	
 	/**
 	 * 获取当前选中的文件夹
 	 * @return
 	 */
 	private TCComponentFolder getSelectFolder() {
 		InterfaceAIFComponent[] targetComponent = app.getTargetComponents();
 		return (TCComponentFolder) targetComponent[0];
 	}

	private void setRunningFlag(boolean flag) {
		Display.getDefault().syncExec(() -> {
			isRunning = flag;
			if (!importButton.isDisposed()) {
				importButton.setEnabled(!flag);
			}
		});
	}
	
	
	
	
	private void setComboValues() {
		Display.getDefault().syncExec(() -> {
			combo.removeAll(); // 清除所有的下拉值
			for (int i = 0; i < comboList.size(); i++) {
				combo.add(comboList.get(i));
			}
			
			comboTextValue = comboList.get(0);
			combo.select(0); // 设置第一项为当前项
		});
		
	}
}
