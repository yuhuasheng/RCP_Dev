package com.foxconn.electronics.login;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;

import com.foxconn.tcutils.util.TCUtil;
import com.simple.traditionnal.util.S2TTransferUtil;
import com.teamcenter.rac.aif.AbstractAIFUIApplication;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.aif.kernel.InterfaceAIFComponent;
import com.teamcenter.rac.aifrcp.AIFUtility;
import com.teamcenter.rac.common.create.BOCreateDefinitionFactory;
import com.teamcenter.rac.common.create.CreateInstanceInput;
import com.teamcenter.rac.common.create.IBOCreateDefinition;
import com.teamcenter.rac.common.create.ICreateInstanceInput;
import com.teamcenter.rac.common.create.SOAGenericCreateHelper;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentIssueReportRevision;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCComponentProcessType;
import com.teamcenter.rac.kernel.TCComponentTaskTemplate;
import com.teamcenter.rac.kernel.TCComponentTaskTemplateType;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCSession;
import com.teamcenter.rac.util.MessageBox;

public class MyIssuesListRefresh extends AbstractHandler {
	public AbstractAIFUIApplication app;
	public static TCSession session = null;
	
	public String MyIssues = "我創建的 Issues";
	public String ExecuteIssues = "我執行的 Issues";
	public String TrackingIssues = "我跟蹤的 Issues";
	
	public String nickname = null;
	public String emp_no = null;
	public String name_no = null;
	
	@Override
	public Object execute(ExecutionEvent arg0) throws ExecutionException {
		app = AIFUtility.getCurrentApplication();
		session = (TCSession) app.getSession();
		
		try {
			TCUtil.setBypass(session);
			
			InterfaceAIFComponent[] targetComponents = app.getTargetComponents();
			if(targetComponents!=null && targetComponents.length != 1) {
				MessageBox.post("請選擇單個對象執行刷新Issue","提示",MessageBox.INFORMATION);
				return null;
			}
			
			OSSUserPojo userPojo = UserLoginSecond.getOSSUserInfo();
			
			if(userPojo!=null) {
				emp_no = userPojo.getEmp_no();
				if(emp_no!=null && !"".equals(emp_no)) {
					TCComponent[] executeQuery = TCUtil.executeQuery(session, "__D9_Find_Actual_User", new String[] {"item_id"},
						new String[] {emp_no});
					if(executeQuery!=null && executeQuery.length >0) {
						nickname = executeQuery[0].getProperty("object_name");
					}
				}
				//nickname  = S2TTransferUtil.toTraditionnalString(userPojo.getNickname());
				name_no = nickname+"("+emp_no+")"+" IssueHome";
				System.out.println("name_no = "+name_no);
			} else {
				MessageBox.post("未檢測到，登錄的二級賬號，請退出重新登錄！","提示",MessageBox.INFORMATION);
				return null;
			}
			
			String type = targetComponents[0].getType();
			if("D9_IssueHome".equals(type)) {
				TCComponent IssueHome = (TCComponent) targetComponents[0];
				TCComponent myIssuesFolder = null;
				TCComponent executeIssuesFolder = null;
				TCComponent trackingIssuesFolder = null;
				
				AIFComponentContext[] children = IssueHome.getChildren();
				for (AIFComponentContext aif :children) {
					TCComponent folder = (TCComponent) aif.getComponent();
					String object_name = folder.getProperty("object_name");
					if(MyIssues.equals(object_name)) {
						myIssuesFolder = folder;
					} else if(ExecuteIssues.equals(object_name)) {
						executeIssuesFolder = folder;
					} else if(TrackingIssues.equals(object_name)) {
						trackingIssuesFolder = folder;
					}
				}
				
				if(myIssuesFolder == null) 
					myIssuesFolder = createIssueFolder(session , "D9_IssueSearch",MyIssues);
				if(executeIssuesFolder == null)
					executeIssuesFolder = createIssueFolder(session , "D9_IssueSearch",ExecuteIssues);
				if(trackingIssuesFolder == null)
					trackingIssuesFolder = createIssueFolder(session , "D9_IssueSearch",TrackingIssues);
				
				getMyIssues(session, myIssuesFolder,  nickname+"("+emp_no+")" );
				getExecuteIssues(session, executeIssuesFolder, emp_no);
				getTrackingIssues(session, trackingIssuesFolder, nickname, emp_no);
				
				
			} else if("D9_IssueSearch".equals(type)){
				String object_name = targetComponents[0].getProperty("object_name");
				
				if(MyIssues.equals(object_name)) {
					TCComponent myIssuesFolder = (TCComponent) targetComponents[0];
					getMyIssues(session, myIssuesFolder,  nickname+"("+emp_no+")" );
					
				} else if(ExecuteIssues.equals(object_name)) {
					TCComponent executeIssuesFolder = (TCComponent) targetComponents[0];
					getExecuteIssues(session, executeIssuesFolder, emp_no);
					
				} else if(TrackingIssues.equals(object_name)) {
					TCComponent trackingIssuesFolder = (TCComponent) targetComponents[0];
					getTrackingIssues(session, trackingIssuesFolder, nickname, emp_no);
					
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			TCUtil.closeBypass(session);
		}
		
		return null;
	}
	
	 /**
     * 創建 IssueFolder
     * 
     * @param session
     * @param type
     * @param name
     * @return
     */
    public static TCComponent createIssueFolder(TCSession session, String type, String name)
    {
        List<ICreateInstanceInput>iputList = new ArrayList<>();
        IBOCreateDefinition createDefinition = BOCreateDefinitionFactory.getInstance().getCreateDefinition(session, type);
        CreateInstanceInput createInstanceInput = new CreateInstanceInput(createDefinition);
        createInstanceInput.add("object_name", name);
        iputList.add(createInstanceInput);
        List<TCComponent> comps = null;
        TCComponent folder = null;
        try
        {
            comps = SOAGenericCreateHelper.create(session, createDefinition, iputList);
            folder = (TCComponent)comps.get(0);
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return folder;
    }
    
    //我创建的 Issues
    public static void getMyIssues(TCSession session, TCComponent myIssuesFolder, String emp_no) throws Exception {
    	ArrayList<TCComponentIssueReportRevision> myIssuesList = new ArrayList<TCComponentIssueReportRevision>();
		
		TCComponent[] executeQuery1 = TCUtil.executeQuery(session, "__D9_find_my_issue_reports",
				new String[] {"d9_ActualUserID" }, new String[] {emp_no});
		if (executeQuery1 != null && executeQuery1.length > 0) {
			for (int i = 0; i < executeQuery1.length; i++) {
				
				if(executeQuery1[i] instanceof TCComponentIssueReportRevision) {
					TCComponentIssueReportRevision issue = (TCComponentIssueReportRevision) executeQuery1[i];
					myIssuesList.add(issue);
				}
			}
		}
		
		if(myIssuesList !=null && myIssuesList.size() > 0) {
			myIssuesList.sort(comparator);
			
			myIssuesFolder.setRelated("contents", myIssuesList.toArray(new TCComponentItemRevision[] {}));
		} else {
			myIssuesFolder.setRelated("contents", new TCComponentItemRevision[] {});
		}
    
    }
    
    //要执行的 Issues
    public static void getExecuteIssues(TCSession session, TCComponent executeIssuesFolder, String emp_no) throws Exception{
		ArrayList<TCComponentIssueReportRevision> executeIssuesList = new ArrayList<TCComponentIssueReportRevision>();
		TCComponent[] executeQuery2 = TCUtil.executeQuery(session, "__D9_find_my_perform_issues",new String[] {},new String[] {});
		if (executeQuery2 != null && executeQuery2.length > 0) {
			for (int i = 0; i < executeQuery2.length; i++) {
				if(executeQuery2[i] instanceof TCComponentIssueReportRevision) {
					TCComponentIssueReportRevision issue = (TCComponentIssueReportRevision) executeQuery2[i];
					
					TCComponent[] wfRelation = issue.getRelatedComponents("fnd0StartedWorkflowTasks");
					if (wfRelation == null || wfRelation.length == 0 ) {
						return;
			        } else {
			        	for (int j = 0; j < wfRelation.length; j++) {
			        		String property = wfRelation[j].getProperty("current_name");
			        		TCComponent component = null;
			        		
			        		if("0-Update and ReSubmit".equals(property) ) {
			        			String property2 = issue.getProperty("d9_ActualUserID");
			        			if(property2.contains(emp_no)) {
			        				executeIssuesList.add(issue);
			        				break;
			        			}
			        		} else if("1-TL Review".equals(property) || "2-TL Assign FixOwner".equals(property) 
			        				|| "4-TL Assign PM".equals(property) || "8-TL Assign Tester".equals(property) 
			        				|| "10-TL Final Review".equals(property) || "11-TL Close Issue".equals(property) ) {
			        			component = issue.getReferenceProperty("d9_IssueTL_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        		} else if("3-FixOwner Review".equals(property) || "7-Fix Issue".equals(property) ) {
			        			component = issue.getReferenceProperty("d9_IssueFixOwner_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        		}  else if("5-PM Assign FixOwner".equals(property) ) {
			        			component = issue.getReferenceProperty("d9_IssueSEPM_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        			component = issue.getReferenceProperty("d9_IssueHWPM_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        			
			        		} else if("6-PM/FixOwner/TL Review".equals(property) ) {
			        			component = issue.getReferenceProperty("d9_IssueSEPM_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        			component = issue.getReferenceProperty("d9_IssueHWPM_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        			
			        			
			        			component = issue.getReferenceProperty("d9_IssueFixOwner_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        			
			        			component = issue.getReferenceProperty("d9_IssueTL_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        		} else if("9-Tester Verify".equals(property) ) {
			        			component = issue.getReferenceProperty("d9_IssueTester_ActualUser");
			        			if(component != null) {
									String item_id = component.getProperty("item_id");
									System.out.println("item_id1 = "+item_id);
									if(emp_no.equals(item_id)) {
										executeIssuesList.add(issue);
										break;
									}
								}
			        		}
						}
			        }
					
				}
			}
		}
		
		if(executeIssuesList !=null && executeIssuesList.size() > 0) {
			executeIssuesList.sort(comparator);
			executeIssuesFolder.setRelated("contents", executeIssuesList.toArray(new TCComponentItemRevision[] {}));
			
		} else {
			executeIssuesFolder.setRelated("contents", new TCComponentItemRevision[] {});
		}
		
    }
    
    //要跟踪的 Issues
    public static void getTrackingIssues(TCSession session, TCComponent trackingIssuesFolder, String nickname, String emp_no) throws Exception {
		ArrayList<TCComponentIssueReportRevision> trackingIssuesList = new ArrayList<TCComponentIssueReportRevision>();
		String ActualUserID = nickname+"("+emp_no+")";
		TCComponent[] executeQuery3 = TCUtil.executeQuery(session, "__D9_find_my_track_issues", new String[] {},  new String[] {});
		if (executeQuery3 != null && executeQuery3.length > 0) {
			for (int i = 0; i < executeQuery3.length; i++) {
				
				if(executeQuery3[i] instanceof TCComponentIssueReportRevision) {
					TCComponentIssueReportRevision issue = (TCComponentIssueReportRevision) executeQuery3[i];
					String d9_ActualUserID = issue.getProperty("d9_ActualUserID");
					if(ActualUserID.equals(d9_ActualUserID)) {
						TCComponent d9_IssueTL_ActualUser = issue.getReferenceProperty("d9_IssueTL_ActualUser");
						if(d9_IssueTL_ActualUser != null) {
							String item_id = d9_IssueTL_ActualUser.getProperty("item_id");
							System.out.println("item_id2 = "+item_id);
							if(emp_no.equals(item_id) ) {
								trackingIssuesList.add(issue);
							}
						}
					}
					
				}
			}
		}
		
		if(trackingIssuesList !=null && trackingIssuesList.size() > 0) {
			trackingIssuesList.sort(comparator);
			trackingIssuesFolder.setRelated("contents", trackingIssuesList.toArray(new TCComponentItemRevision[] {}));
		} else {
			trackingIssuesFolder.setRelated("contents", new TCComponentItemRevision[] {});
		}
	
    }
    
    
    public static String addStatusByWorkFlow(TCSession tcsession, TCComponent[] com, String mProcessName)
			throws TCException {
		String mProcess = "";
		if (com != null && com.length > 0) {
			TCComponentTaskTemplateType tcTaskTemType = (TCComponentTaskTemplateType) tcsession
					.getTypeComponent("EPMTaskTemplate");
			TCComponentTaskTemplate taskTem = tcTaskTemType.find(mProcessName, 0);
			TCComponentProcessType tcProcessType = (TCComponentProcessType) tcsession.getTypeComponent("Job");
			int[] var7 = new int[com.length];
			Arrays.fill(var7, 1);
			tcProcessType.create(mProcessName + ":" + com[0].getProperty("object_string"), mProcessName, taskTem, com,
					var7);
			mProcess = mProcessName + ":" + com[0].getProperty("object_string");
		}
		return mProcess;
	}
    
   public static Comparator<TCComponentIssueReportRevision> comparator = new Comparator<TCComponentIssueReportRevision>() {

		@Override
		public int compare(TCComponentIssueReportRevision o1, TCComponentIssueReportRevision o2) {
			// TODO Auto-generated method stub
			try {
				String property1 = o1.getProperty("item_id");
				String property2 = o2.getProperty("item_id");
				
				return property2.compareTo(property1);
			} catch (TCException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return 0;
		}
	};
    
}