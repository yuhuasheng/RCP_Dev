package com.foxconn.electronics.login;

import com.foxconn.electronics.util.TCJxbrowser;
import com.foxconn.electronics.util.TCUtil;
import com.teamcenter.rac.aif.AbstractAIFDialog;
import com.teamcenter.rac.pse.AbstractPSEApplication;
import com.teamcenter.rac.services.IUserLoginAuthenticator;
import com.teamcenter.rac.util.Registry;
import com.teamcenter.rac.util.log.TcLogger;
import com.teamdev.jxbrowser.browser.Browser;

import cn.hutool.http.HttpRequest;
import cn.hutool.json.JSONUtil;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.awt.SWT_AWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

public class UserLoginSecond implements IUserLoginAuthenticator
{
    boolean                    userLoginAuthenticationStatus = false;
    private Browser            browser;
    private TCJxbrowser        jb;
    private Shell              shell;
    private static OSSUserPojo userPojo;

    public UserLoginSecond()
    {
    }

    @Override
    public void runUserLoginAuthentication()
    {
        userOSSLogin();
        if (!userLoginAuthenticationStatus)
        {
            Display display = Display.getCurrent();
            if (display == null)
            {
                display = new Display();
            }
            MessageDialog.openError(display.getActiveShell(), "User Login Authenticator", "Cancel authenticate user login. ");
        }
    }

    @Override
    public boolean runUserLoginAuthentication2()
    {
        userOSSLogin();
        if (!userLoginAuthenticationStatus)
        {
            Display display = Display.getCurrent();
            if (display == null)
            {
                display = new Display();
            }
            MessageDialog.openError(display.getActiveShell(), "User Login Authenticator", "Cancel authenticate user login. ");
        }
        return userLoginAuthenticationStatus;
    }

    /**
     * 打开 相信登录的窗口
     * 
     * @param display
     * @param url
     */
    public void openOSSLoginWindow(Display display, String url)
    {
        shell = new Shell(display.getActiveShell(), SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL);
        shell.setSize(680, 660);
        shell.setText("二级账号通过相信登录TC");
        shell.setLayout(new FillLayout());
        TCUtil.centerShell(shell);
        Composite mainComposite = new Composite(shell, SWT.EMBEDDED | SWT.NO_BACKGROUND);
        Frame frame = SWT_AWT.new_Frame(mainComposite);
        frame.setLayout(new BorderLayout());
        jb = new TCJxbrowser(url);
        browser = jb.getBrowser();
        frame.add(jb.getBrowserView());
        frame.addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosed(WindowEvent var1)
            {
                super.windowClosed(var1);
                browser.close();
            }
        });
        shell.open();
        shell.layout();
        while (!shell.isDisposed())
        {
            if (!display.readAndDispatch())
            {
                display.sleep();
            }
        }
    }

    /**
     * 在单独的线程中轮询 获取相信登录结果 及用户信息
     * 
     * @param display
     * @param key
     */
    private void verificationLogin(Display display, String key)
    {
        Long startTime = System.currentTimeMillis();
        new Thread(() -> {
            while (true)
            {
                Long currenTime = System.currentTimeMillis();
                // 设置 5分钟超时
                if ((currenTime - startTime) / 1000 > 5 * 60)
                {
                    System.out.println("timeout exit !");
                    closeOSSLoginWindow(display);// 超时关闭相信登录界面
                    break;
                }
                try
                {
                    Thread.sleep(500);
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
                if (browser != null && !browser.isClosed())
                {
                    String userJson = HttpRequest.get("http://10.203.163.43:18087/ee3DReport/getOSSState?tcKey=" + key).execute().body();
                    System.out.println(" -------- >> " + userJson);
                    if (StringUtils.isNotEmpty(userJson))
                    {
                        userPojo = JSONUtil.toBean(userJson, OSSUserPojo.class);
                        System.out.println("userPojo :: " + userPojo.getEmp_no());
                        userLoginAuthenticationStatus = true; // 标识登录成功
                        closeOSSLoginWindow(display);// 登录成功关闭 相信登录界面
                        break;
                    }
                }
                else
                {
                    System.out.println("browser != null  " + (browser != null));
                    if (browser != null)
                    {
                        System.out.println("browser.isClosed()  " + (!browser.isClosed()));
                    }
                }
            }
        }).start();
    }

    private void closeOSSLoginWindow(Display display)
    {
        browser.close();
        jb.close();
        display.syncExec(() -> {
            shell.dispose();
        });
    }

    private void userOSSLogin()
    {
        Display display = Display.getCurrent();
        if (display == null)
        {
            display = new Display();
        }
        String uuid = UUID.randomUUID().toString();
        verificationLogin(display, uuid);
        openOSSLoginWindow(display, "https://sso.foxconn.com/connect/authorize?client_id=TcSS&redirect_uri=http%3A//10.203.163.247/&response_type=code&scope=openid%20profile%20foxconn&state=" + uuid);
        System.out.println("display   display   userLoginAuthenticationStatus : " + userLoginAuthenticationStatus);
    }

    public static OSSUserPojo getOSSUserInfo()
    {
        return userPojo;
    }
}
