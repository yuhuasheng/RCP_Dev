package com.foxconn.electronics.L10Ebom.domain;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.foxconn.electronics.util.TCPropName;
import com.foxconn.tcutils.util.TCUtil;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentBOMLine;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCException;

public class L10EBOMBean implements Cloneable {

	private String parentItem;
	private String parentRevUid;
	private transient String parentUid;
	private String itemRevUid;
	private List<L10EBOMBean> childs;
	private List<L10EBOMBean> secondSource;
	public transient TCComponentBOMLine bomLine;
	
	
	@TCPropName("item_id")
	private String item;
	@TCPropName("item_revision_id")
	private String version;
	@TCPropName(value = "release_status_list")
	private String status;
	@TCPropName("d9_EnglishDescription")
	private String description;
	@TCPropName("d9_DescriptionSAP")
	private String sapDescription;
	@TCPropName("d9_ManufacturerID")
	private String mfg;
	@TCPropName("d9_ManufacturerPN")
	private String mfgPn;
	@TCPropName("d9_MaterialGroup")
	private String materialGroup;
	@TCPropName("d9_MaterialType")
	private String materialType;
	@TCPropName(value = "d9_Un")
	private String unit;
	@TCPropName(value = "d9_ProcurementMethods")
	private String procurementType;
	@TCPropName(value = "d9_TempPN")
	private String tempPN;
	@TCPropName(value = "d9_SAPRev")
	private String sapRev;
	@TCPropName(value = "d9_SupplierZF")
	private String supplierZF;

	@TCPropName("bl_sequence_no")
	private Integer findNum;
	@TCPropName(value = "bl_occ_d9_Location", otherVal = "bl_occ_ref_designator")
	private String location;
	@TCPropName(value = "bl_quantity")
	private String qty;
	@TCPropName(value = "bl_occ_d9_PackageType")
	private String packageType;
	@TCPropName(value = "bl_occ_d9_Side")
	private String side;
	@TCPropName("bl_occ_d9_AltGroup")
	private String alternativeGroup;
	@TCPropName(value = "bl_occ_d9_ReferenceDimension")
	private String referenceDimension;
	
	private String uid;
	private Boolean isSecondSource;
	private transient String mainSource;
	private String bomId;
	private String sourceSystem;
	private String alternativeCode;
	private Boolean isNewVersion;
	private Boolean isModifyTree;
	private Boolean isModifyItem;
	private String userBu;
	private Boolean isBOMViewWFTask;
	private Boolean isJumpLine;
	private Boolean hasChild;
	private Boolean isCanDcn = true;
	private Boolean canEditPIEE = false;

	public L10EBOMBean() {
	}

	public L10EBOMBean(TCComponentBOMLine bomLine) {
		childs = Collections.synchronizedList(new ArrayList<L10EBOMBean>());
		secondSource = Collections.synchronizedList(new ArrayList<L10EBOMBean>());
		try {
			tcPropMapping(this, bomLine);
			TCComponentItemRevision itemRev = bomLine.getItemRevision();
			if (itemRev == null) {
				TCComponent itemRevs[] = bomLine.getItem().getRelatedComponents("revision_list");
				itemRev = (TCComponentItemRevision) itemRevs[itemRevs.length - 1];
			}
			this.setItemRevUid(itemRev.getUid());
			this.bomLine = bomLine;
		} catch (IllegalArgumentException | IllegalAccessException | TCException e) {
			e.printStackTrace();
		}
	}

	public String getParentItem() {
		return parentItem;
	}

	public void setParentItem(String parentItem) {
		this.parentItem = parentItem;
	}

	public String getBomId() {
		return this.bomId;
	}

	public void setBomId(String key) {
//		this.bomId = this.parentItem + "$" + this.getItem();
//		if (!TCUtil.isNull(this.mainSource)) {
//			this.bomId += this.mainSource;
//		}
		
		if(key==null || "".equals(key)) {
			this.bomId = this.getItem();
		}else {
			this.bomId = key + "$" + this.getItem();
		}
	}

	public List<L10EBOMBean> getChilds() {
		return childs;
	}

	public void addChild(L10EBOMBean child) {
		this.childs.add(child);
	}

	public Integer getFindNum() {
		return findNum;
	}

	public void setFindNum(Integer findNum) {
		this.findNum = findNum;
	}

	public String getItem() {
		return item;
	}

	public void setItem(String item) {
		this.item = item;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getMfg() {
		return mfg;
	}

	public void setMfg(String mfg) {
		this.mfg = mfg;
	}

	public String getMfgPn() {
		return mfgPn;
	}

	public void setMfgPn(String mfgPn) {
		this.mfgPn = mfgPn;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public List<L10EBOMBean> getSecondSource() {
		return secondSource;
	}

	public void setSecondSource(List<L10EBOMBean> secondSource) {
		this.secondSource = secondSource;
	}
	
	public void addSecondSource(L10EBOMBean child) {
		this.secondSource.add(child);
	}
	
	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}

	public Boolean getIsSecondSource() {
		return isSecondSource;
	}

	public void setIsSecondSource(Boolean isSecondSource) {
		this.isSecondSource = isSecondSource;
	}

	public String getMainSource() {
		return mainSource;
	}

	public void setMainSource(String mainSource) {
		this.mainSource = mainSource;
	}

	@Override
	public boolean equals(Object var1) {
		if (var1 instanceof L10EBOMBean) {
			L10EBOMBean other = (L10EBOMBean) var1;
			if (!TCUtil.isNull(this.uid) && !TCUtil.isNull(other.getUid())) {
				return this.uid.equals(other.getUid());
			}
		}
		return super.equals(var1);
	}

	public String toString() {
		return this.uid + " " + this.getFindNum() + "   " + this.getItem() + "  " + this.getLocation();
	}

	public String getVersion() {
		return version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	public String getQty() {
		return qty;
	}

	public void setQty(String qty) {
		this.qty = qty;
	}

	public String getUnit() {
		return unit;
	}

	public void setUnit(String unit) {
		this.unit = unit;
	}

	public String getPackageType() {
		return packageType;
	}

	public void setPackageType(String packageType) {
		this.packageType = packageType;
	}

	@Override
	public L10EBOMBean clone() throws CloneNotSupportedException {
		return (L10EBOMBean) super.clone();
	}

	public void setChilds(List<L10EBOMBean> childs) {
		this.childs = childs;
	}

	public String getParentRevUid() {
		return parentRevUid;
	}

	public void setParentRevUid(String parentRevUid) {
		this.parentRevUid = parentRevUid;
	}

	public String getItemRevUid() {
		return itemRevUid;
	}

	public void setItemRevUid(String itemRevUid) {
		this.itemRevUid = itemRevUid;
	}

	public String getAlternativeGroup() {
		return alternativeGroup;
	}

	public void setAlternativeGroup(String alternativeGroup) {
		this.alternativeGroup = alternativeGroup;
	}

	public String getAlternativeCode() {
		return alternativeCode;
	}

	public void setAlternativeCode(String alternativeCode) {
		this.alternativeCode = alternativeCode;
	}

	public String getSourceSystem() {
		return sourceSystem;
	}

	public void setSourceSystem(String sourceSystem) {
		this.sourceSystem = sourceSystem;
	}

	public String getMaterialGroup() {
		return materialGroup;
	}

	public void setMaterialGroup(String materialGroup) {
		this.materialGroup = materialGroup;
	}

	public String getMaterialType() {
		return materialType;
	}

	public void setMaterialType(String materialType) {
		this.materialType = materialType;
	}

	public Boolean getIsModifyTree() {
		return isModifyTree==null? false:isModifyTree;
	}

	public void setIsModifyTree(Boolean isModifyTree) {
		this.isModifyTree = isModifyTree;
	}

	public Boolean getIsNewVersion() {
		return isNewVersion;
	}

	public void setIsNewVersion(Boolean isNewVersion) {
		this.isNewVersion = isNewVersion;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getSide() {
		return side;
	}

	public void setSide(String side) {
		this.side = side;
	}

	public String getProcurementType() {
		return procurementType;
	}

	public void setProcurementType(String procurementType) {
		this.procurementType = procurementType;
	}

	public Boolean getIsModifyItem() {
		return isModifyItem==null? false:isModifyItem;
	}

	public void setIsModifyItem(Boolean isModifyItem) {
		this.isModifyItem = isModifyItem;
	}

	public String getUserBu() {
		return userBu;
	}

	public void setUserBu(String userBu) {
		this.userBu = userBu;
	}

	public Boolean getIsBOMViewWFTask() {
		return isBOMViewWFTask;
	}

	public void setIsBOMViewWFTask(Boolean isBOMViewWFTask) {
		this.isBOMViewWFTask = isBOMViewWFTask;
	}

	public Boolean getIsJumpLine() {
		return isJumpLine;
	}

	public void setIsJumpLine(Boolean isJumpLine) {
		this.isJumpLine = isJumpLine;
	}

	public Boolean getHasChild() {
		return hasChild;
	}

	public void setHasChild(Boolean hasChild) {
		this.hasChild = hasChild;
	}

	public String getReferenceDimension() {
		return referenceDimension;
	}

	public void setReferenceDimension(String referenceDimension) {
		this.referenceDimension = referenceDimension;
	}

	public String getSapDescription() {
		return sapDescription;
	}

	public void setSapDescription(String sapDescription) {
		this.sapDescription = sapDescription;
	}

	public String getParentUid() {
		return parentUid;
	}

	public void setParentUid(String parentUid) {
		this.parentUid = parentUid;
	}

	public String getSapRev() {
		return sapRev;
	}

	public void setSapRev(String sapRev) {
		this.sapRev = sapRev;
	}

	public Boolean getIsCanDcn() {
		return isCanDcn;
	}

	public void setIsCanDcn(Boolean isCanDcn) {
		this.isCanDcn = isCanDcn;
	}

	public String getSupplierZF() {
		return supplierZF;
	}

	public void setSupplierZF(String supplierZF) {
		this.supplierZF = supplierZF;
	}

	public Boolean getCanEditPIEE() {
		return canEditPIEE;
	}

	public void setCanEditPIEE(Boolean canEditPIEE) {
		this.canEditPIEE = canEditPIEE;
	}

	public static L10EBOMBean tcPropMapping(L10EBOMBean bean, TCComponentBOMLine tcbomLine)
			throws IllegalArgumentException, IllegalAccessException, TCException {
		if (bean != null && tcbomLine != null) {
			TCComponentItemRevision itemRev = tcbomLine.getItemRevision();
			if (itemRev == null) {
				TCComponent itemRevs[] = tcbomLine.getItem().getRelatedComponents("revision_list");
				itemRev = (TCComponentItemRevision) itemRevs[itemRevs.length - 1];
			}
			Field[] fields = bean.getClass().getDeclaredFields();
			for (int i = 0; i < fields.length; i++) {
				fields[i].setAccessible(true);
				TCPropName tcPropName = fields[i].getAnnotation(TCPropName.class);
				if (tcPropName != null) {
					String tcAttrName = tcPropName.value();
					if (!tcAttrName.isEmpty()) {
						Object value = "";
						if (tcAttrName.startsWith("bl")) {
							value = tcbomLine.getProperty(tcAttrName);
							if (value == null || value.equals("")) {
								String tcOtherAttrName = tcPropName.otherVal();
								if (!TCUtil.isNull(tcOtherAttrName)) {
									value = tcbomLine.getProperty(tcOtherAttrName);
								}
							}
						} else {
							value = itemRev.getProperty(tcAttrName);
						}
						if (fields[i].getType() == Integer.class) {
							if (value.equals("") || value == null) {
								value = null;
							} else {
								value = Integer.parseInt((String) value);
							}
						}
						fields[i].set(bean, value);
					}
				}
			}
			bean.setUid(tcbomLine.getUid());
		}
		return bean;
	}
}
