package com.foxconn.electronics.document;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.foxconn.electronics.domain.Constants;
import com.foxconn.electronics.util.TCUtil;
import com.google.gson.Gson;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.aif.kernel.InterfaceAIFComponent;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentDataset;
import com.teamcenter.rac.kernel.TCComponentFolder;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCPreferenceService;
import com.teamcenter.rac.kernel.TCSession;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.ArrayUtil;

public class DocPlaceOnFileService {
	
	private TCSession session;
	
	private String D9_Allow_TandBInfo_Item = "D9_Allow_TandBInfo_Item";
	
	private String D9_MODEL_TYPE = "D9_Model_Type";
	
	private final String Layout = "Layout";
	
	private final String EE = "EE";
	
	private List<String> itemRevlist = null;
	
	private List<String> modelTypeList = null;
	
	private String providerName = "FOXCONN";
	private String serviceName = "checkplacementnew";
	
	public DocPlaceOnFileService(TCSession session) throws TCException {
		super();
		this.session = session;
		itemRevlist = TCUtil.getArrayPreference(TCPreferenceService.TC_preference_site, D9_Allow_TandBInfo_Item);
		if (CollUtil.isEmpty(itemRevlist)) {
			throw new TCException("首选项: " + D9_Allow_TandBInfo_Item + ", 不存在，请和TC管理员联系");
		}
		
		modelTypeList = TCUtil.getArrayPreference(TCPreferenceService.TC_preference_site, D9_MODEL_TYPE);		
	}
	
	
	public void doPlacement(TCComponent tcComponent, String projectId, String path) {
		try {
			TCComponentItemRevision itemRev = (TCComponentItemRevision) tcComponent;
			String itemId = itemRev.getProperty("item_id");
			System.out.println("==>> itemId: " + itemId);
			String version = itemRev.getProperty("item_revision_id");
			System.out.println("==>> version: " + version);
			
			if (!checkItemRevType(itemRev)) {
				System.err.println("零组件ID为: " + itemId + ", 版本号为: "+ version + ", 对象版本类型不符合要求");
				return;
			}
			
			if (!checkDataset(itemRev)) {
				System.err.println("零组件ID为: " + itemId + ", 版本号为: "+ version + ", 不存在placement文件");
				return;
			}
			
			TCComponentFolder projectFolder = getProjectFolder(projectId);
			if (null == projectFolder) {
				System.err.println("项目ID为:  " + projectId + ", 不存在专案文件夹");
				return;
			}
			
			path = path.replace(Layout, EE);
			String modelType = path.substring(path.lastIndexOf("/"));			
			System.out.println("==>> path: " + path);
			Map<String, TCComponent> map = new LinkedHashMap<String, TCComponent>();
			getFolderPath(projectFolder, map, "", false);
			
			List<TCComponent> revList = getEEItemRevList(map, path);
			if (CollUtil.isEmpty(revList)) {
				System.err.println("专案文件路径为: " + path + "不存在EE PCBA对象版本");
				return;
			}			
			
			Gson gson = new Gson();
			List<String> EERevUidList = revList.stream().map(TCComponent::getUid).collect(Collectors.toList());
			TCComponent[] primaryObjects = {itemRev};
			TCComponent[] secondaryObjects = revList.stream().toArray(TCComponent[]::new);
			Map<String, String> requestMap = new HashMap<String, String>();
			requestMap.put("LayoutRevUid", itemRev.getUid());
//			requestMap.put("EERevUid", gson.toJson(EERevUidList));
			requestMap.put("EERevUid", gson.toJson(EERevUidList));
			
			System.out.println(requestMap);
			boolean request = com.foxconn.tcutils.util.TCUtil.sendDispatcherRequest(providerName, serviceName, 3, primaryObjects, secondaryObjects, null, 0, null, null, requestMap);
			if (request) {
				System.out.println("==>> 提交Layout更新EE正反面信息Dispatcher请求成功");
			}			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	/**
	 * 判断数据集是否含有placement文件或者Excel含有Location字样
	 * @param itemRev
	 * @throws TCException
	 */
	private boolean checkDataset(TCComponentItemRevision itemRev) throws TCException {
		TCComponent[] EDAHasDerivedDatasetObjects = itemRev.getRelatedComponents("EDAHasDerivedDataset");
		TCComponent[] imanSpecification = itemRev.getRelatedComponents("IMAN_specification");
		boolean anyMatch = false;
		if (ArrayUtil.isNotEmpty(EDAHasDerivedDatasetObjects)) {
			anyMatch = Stream.of(EDAHasDerivedDatasetObjects).anyMatch(obj -> {
				try {
					if (obj instanceof TCComponentDataset) {
						return "D9_Placement".equals(obj.getTypeObject().getName());
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
				return false;
			});
		} else if (ArrayUtil.isNotEmpty(imanSpecification)) {
			anyMatch = Stream.of(imanSpecification).anyMatch(obj -> {
				try {
					if (obj instanceof TCComponentDataset) {
						String type = obj.getTypeObject().getName();
						String objectName = obj.getProperty("object_name");
						return ("MSExcel".equals(type) || "MSExcelX".equals(type)) && objectName.contains("Location");
					}
				} catch (Exception e2) {
					e2.printStackTrace();	
				}
				return false;
			});
		}
		return anyMatch;
	}
	
	
	/**
	 * 获取专案文件夹
	 * @param projectId
	 * @return
	 * @throws Exception
	 */
	private TCComponentFolder getProjectFolder(String projectId) throws Exception {
		TCComponent[] queryResult = TCUtil.executeQuery(session, Constants.FIND_PROJECT_FOLDER, new String[] {Constants.SPAS_ID}, new String[] {projectId});
		if (null == queryResult || queryResult.length <= 0) {
			System.out.println("专案ID为: " + projectId + ", 查询专案文件夹失败");
			return null;
		}
		return (TCComponentFolder) queryResult[0];
		
	}
	
	
	
	/**
	 * 获取专案文件路径
	 * @param parent
	 * @param current
	 * @param map
	 * @param path
	 * @return
	 * @throws TCException
	 */
	private void getFolderPath(TCComponent current, Map<String, TCComponent> map, String path, boolean flag) throws TCException {
		String objectName = current.getProperty("object_name");
		if (EE.equals(objectName)) {
			flag = true;
		}
		
		if (!(current instanceof TCComponentFolder)) {
			return;
		}
		
		path += objectName + "/";
//		current.refresh();
		AIFComponentContext[] children = current.getChildren();
		if (ArrayUtil.isEmpty(children) || !checkFolder(children)) {						
			if (!map.containsKey(path) && flag) {
				map.put(path.substring(0, path.length() - 1), current);
			}
			return;
		}
		
		for (AIFComponentContext child : children) {
			getFolderPath((TCComponent)child.getComponent(), map, path, flag);
		}	
		
	}
	
	
	/**
	 * 判断是否有文件夹对象
	 * @param aifAifComponentContexts
	 * @return
	 */
	private boolean checkFolder(AIFComponentContext[] contexts) {
		return Stream.of(contexts).anyMatch(context -> {
			try {
				TCComponent component = (TCComponent) context.getComponent();
				return (component instanceof TCComponentFolder);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return false;
		});
	}
	
	
	/**
	 * 获取EE对象版本
	 * @param map
	 * @param path
	 * @return
	 * @throws TCException
	 */
	private List<TCComponent> getEEItemRevList(Map<String, TCComponent> map, String path) throws TCException {
		TCComponent folder = null;
		List<TCComponent> list = new ArrayList<TCComponent>();		
		Optional<Entry<String,TCComponent>> findFolder = map.entrySet().stream().filter(m -> m.getKey().equals(path)).findAny(); // 判断EE部门文件夹
		if (findFolder.isPresent()) {
			folder = findFolder.get().getValue();			
		}
		
		if (null == folder) {
			return null;
		}
		
		folder.refresh();
		AIFComponentContext[] children = folder.getChildren();
		if (ArrayUtil.isEmpty(children)) {
			return null;
		}
		
		Stream.of(children).forEach(context -> {
			try {
				InterfaceAIFComponent component = context.getComponent();
				TCComponentItemRevision itemRev = null;
				if (component instanceof TCComponentItemRevision) {
					itemRev = (TCComponentItemRevision) component;
					if (checkItemRevType(itemRev)) {
						if (TCUtil.isBOM(itemRev)) {
							list.add(itemRev);
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		});
		
		return list;
	}
	
	
	/**
	 * 校验版本类型
	 * @param itemRev
	 * @return
	 */
	private boolean checkItemRevType(TCComponentItemRevision itemRev) {		
		return itemRevlist.stream().anyMatch(str -> {
			try {
				return itemRev.getTypeObject().getName().equals(str);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return false;
		});	
		
	}
	
	
}
