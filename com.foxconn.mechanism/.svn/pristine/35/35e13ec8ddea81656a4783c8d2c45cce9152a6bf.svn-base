package com.foxconn.mechanism.dpbupcbabom;

import java.awt.Frame;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import com.foxconn.mechanism.dpbupcbabom.domain.BOMMakeApplyModel;
import com.foxconn.mechanism.dpbupcbabom.domain.FinishMatBean;
import com.foxconn.mechanism.dpbupcbabom.domain.FinishMatSheetConstant;
import com.foxconn.mechanism.dpbupcbabom.domain.FunctionConstants;
import com.foxconn.mechanism.dpbupcbabom.domain.PCBAAndFWMatBean;
import com.foxconn.mechanism.dpbupcbabom.domain.PCBAAndFWMatSheetConstant;
import com.foxconn.mechanism.dpbupcbabom.domain.PCBAEBOMCreateBean;
import com.foxconn.mechanism.dpbupcbabom.domain.PCBAEBOMCreateSheetConstant;
import com.foxconn.mechanism.hhpnmaterialapply.export.util.TCPropertes;
import com.foxconn.mechanism.hhpnmaterialapply.message.MessageShow;
import com.foxconn.mechanism.util.CommonTools;
import com.foxconn.mechanism.util.ExcelUtils;
import com.foxconn.mechanism.util.ProgressBarThread;
import com.teamcenter.rac.aif.AbstractAIFApplication;
import com.teamcenter.rac.aif.common.actions.AbstractAIFAction;
import com.teamcenter.rac.aif.kernel.InterfaceAIFComponent;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCSession;
import com.teamcenter.rac.util.Registry;

public class BOMMakeApplyAction extends AbstractAIFAction {
	private AbstractAIFApplication app = null;
	private TCSession session = null;
	private Registry reg = null;
	private ProgressBarThread barThread = null;
	private String functionName = null;
	public static final String EXCEL_TEMPLATE = "com/foxconn/mechanism/dpbupcbabom/template/DPBU_PCBA_BOM_Export_Template.xlsx";
	
	public BOMMakeApplyAction(AbstractAIFApplication arg0, Frame arg1, String arg2, String functionName) {
		super(arg0, arg1, arg2);
		this.app = arg0;
		this.functionName = functionName;
		this.session = (TCSession) app.getSession();	
		reg = Registry.getRegistry("com.foxconn.mechanism.dpbupcbabom.dpbupcbabom");
	}

	@Override
	public void run() {
		try {
			barThread = new ProgressBarThread(reg.getString("wait.MSG"), functionName + reg.getString("export.MSG"));
			InterfaceAIFComponent targetComponent = app.getTargetComponent(); // 获取选中的目标对象
			if (!(targetComponent instanceof TCComponentItemRevision)) {
				MessageShow.warningMsgBox(reg.getString("selectErr.MSG"), reg.getString("WARNING.MSG"));
				return;
			}

			TCComponentItemRevision itemRevision = (TCComponentItemRevision) targetComponent;
			File exportFile = openFileChooser(getDefaultFileName(itemRevision, functionName.replace("&&", "&")));
			if (CommonTools.isEmpty(exportFile)) {
				return;
			}
			
			barThread.start();
			
			List<TCComponent> relatedComponents = null;
			
			if (FunctionConstants.ExportFinishMatInfo.equals(functionName)) {
				relatedComponents = new ArrayList<TCComponent>(Arrays.asList(itemRevision.getRelatedComponents("d9_BOMReqTable")));
				if (CommonTools.isEmpty(relatedComponents)) {
					MessageShow.warningMsgBox(reg.getString("finishMatErr.MSG"), reg.getString("WARNING.MSG"));
					throw new Exception();
				}
			} else if (FunctionConstants.ExportPCBAAndFWMatInfo.equals(functionName)) {						
				relatedComponents = new ArrayList<TCComponent>(Arrays.asList(itemRevision.getRelatedComponents("D9_BOMReq_PCBA_REL")));
				relatedComponents.removeIf(component -> component.getTypeObject().getName().contains("DCNRevision"));
				if (CommonTools.isEmpty(relatedComponents)) {
					MessageShow.warningMsgBox(reg.getString("pcbaAndFWMatErr.MSG"), reg.getString("WARNING.MSG"));
					throw new Exception();
				}
			} else if (FunctionConstants.ExportPCBAEBOMCreateInfo.equals(functionName)) {
				relatedComponents = new ArrayList<TCComponent>(Arrays.asList(itemRevision.getRelatedComponents("D9_BOMReq_EBOM_REL")));
				relatedComponents.removeIf(component -> component.getTypeObject().getName().contains("DCNRevision"));
				if (CommonTools.isEmpty(relatedComponents)) {
					MessageShow.warningMsgBox(reg.getString("pcbaEbomCreateErr.MSG"), reg.getString("WARNING.MSG"));
					throw new Exception();
				}
			}		
			
			List<BOMMakeApplyModel> matInfoList = getMatInfo(relatedComponents, functionName); // 获取料号信息
			matInfoList.sort(Comparator.comparing(BOMMakeApplyModel:: getSequence)); // 按照sequence进行排序
			if (CommonTools.isEmpty(matInfoList)) {
				MessageShow.warningMsgBox(reg.getString("tcPropMappingErr.MSG"), reg.getString("ERROR.MSG"));
				throw new Exception();
			}
			
			generatePCBAPartFile(exportFile, matInfoList, functionName);
			barThread.stopBar();
			MessageShow.infoMsgBox(reg.getString("exportSuccess.MSG"), reg.getString("INFORMATION.MSG"));
		} catch (Exception e) {
			e.printStackTrace();
			barThread.stopBar();
			MessageShow.errorMsgBox(reg.getString("exportFailure.MSG"), reg.getString("ERROR.MSG"));
		}
	}

	/**
	 * 获取料号信息
	 * 
	 * @param itemRevision
	 * @return
	 * @throws TCException
	 */
	private List<BOMMakeApplyModel> getMatInfo(List<TCComponent> relatedComponents, String functionName)
			throws TCException {
		List<BOMMakeApplyModel> list = Collections.synchronizedList(new ArrayList<BOMMakeApplyModel>());
		AtomicInteger atomicInteger = new AtomicInteger(1); // 初始值设置为1
		relatedComponents.parallelStream().forEach(component -> {
			try {
				BOMMakeApplyModel bean = null;
				if (FunctionConstants.ExportFinishMatInfo.equals(functionName)) {
					bean = tcPropMapping(new FinishMatBean(), component);
				} else if (functionName.startsWith(FunctionConstants.ExportPCBAAndFWMatInfo.split("&&")[0])
						&& functionName.endsWith(FunctionConstants.ExportPCBAAndFWMatInfo.split("&&")[1])) {
					bean = tcPropMapping(new PCBAAndFWMatBean(), component);
					bean.setSequence(atomicInteger.getAndIncrement()); // 设置当前值，并且自增长1
				} else if (FunctionConstants.ExportPCBAEBOMCreateInfo.equals(functionName)) {
					bean = tcPropMapping(new PCBAEBOMCreateBean(), component);
					bean.setSequence(atomicInteger.getAndIncrement()); // 设置当前值，并且自增长1
				}

				if (CommonTools.isNotEmpty(bean)) {
					list.add(bean);
				}
			} catch (IllegalArgumentException | IllegalAccessException | TCException e) {
				e.printStackTrace();
			}
		});
		return list;
	}

	
	public static void main(String[] args) {
		System.out.println(FunctionConstants.ExportPCBAAndFWMatInfo.split("&&")[0]);
		System.out.println(FunctionConstants.ExportPCBAAndFWMatInfo.split("&&")[1]);
//		List<FinishMatBean> list = new ArrayList<FinishMatBean>();
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		list.add(new FinishMatBean());
//		AtomicInteger atomicInteger = new AtomicInteger(1);
//		list.parallelStream().forEach(bean -> {
//			bean.setSequence(atomicInteger.getAndIncrement());
//		});
//		
////		list.sort(Comparator.comparing(FinishMatBean:: getSequence)); // 按照sequence进行排序
//		list.forEach(bean -> {
//			System.out.println(bean.getSequence());			
//		});
	}
	
	
	/**
	 * 输出PCBA料号信息到本地
	 * @param targetFile
	 * @param list
	 * @param functionName
	 * @throws IllegalArgumentException
	 * @throws IllegalAccessException
	 * @throws IOException
	 */
	private void generatePCBAPartFile(File targetFile, List<BOMMakeApplyModel> list, String functionName) throws IllegalArgumentException, IllegalAccessException, IOException {
		ExcelUtils excelUtils = new ExcelUtils();
		Workbook wb = excelUtils.getWorkbook(EXCEL_TEMPLATE);
		CellStyle cellStyle = excelUtils.getCellStyle(wb);
		Sheet sheet = null;
		if (FunctionConstants.ExportFinishMatInfo.equals(functionName)) {
			wb.setActiveSheet(wb.getSheetIndex(FunctionConstants.ExportFinishMatInfo));
			wb.setSheetHidden(wb.getSheetIndex(FunctionConstants.ExportPCBAAndFWMatInfo), true);
			wb.setSheetHidden(wb.getSheetIndex(FunctionConstants.ExportPCBAEBOMCreateInfo), true);
			sheet = wb.getSheet(FunctionConstants.ExportFinishMatInfo);
			excelUtils.setCellValue(list, FinishMatSheetConstant.STARTROW, FinishMatSheetConstant.COLLENGTH, sheet, cellStyle);
		} else if (functionName.startsWith(FunctionConstants.ExportPCBAAndFWMatInfo.split("&&")[0])
				&& functionName.endsWith(FunctionConstants.ExportPCBAAndFWMatInfo.split("&&")[1])) {
			wb.setActiveSheet(wb.getSheetIndex(FunctionConstants.ExportPCBAAndFWMatInfo));
			wb.setSheetHidden(wb.getSheetIndex(FunctionConstants.ExportFinishMatInfo), true);
			wb.setSheetHidden(wb.getSheetIndex(FunctionConstants.ExportPCBAEBOMCreateInfo), true);
			sheet = wb.getSheet(FunctionConstants.ExportPCBAAndFWMatInfo);
			excelUtils.setCellValue(list, PCBAAndFWMatSheetConstant.STARTROW, PCBAAndFWMatSheetConstant.COLLENGTH, sheet, cellStyle);			
		} else if (FunctionConstants.ExportPCBAEBOMCreateInfo.equals(functionName)) {
			wb.setActiveSheet(wb.getSheetIndex(FunctionConstants.ExportPCBAEBOMCreateInfo));
			wb.setSheetHidden(wb.getSheetIndex(FunctionConstants.ExportFinishMatInfo), true);
			wb.setSheetHidden(wb.getSheetIndex(FunctionConstants.ExportPCBAAndFWMatInfo), true);
			sheet = wb.getSheet(FunctionConstants.ExportPCBAEBOMCreateInfo);
			excelUtils.setCellValue(list, PCBAEBOMCreateSheetConstant.STARTROW, PCBAEBOMCreateSheetConstant.COLLENGTH, sheet, cellStyle);			
		}
		OutputStream out = new FileOutputStream(targetFile);
		wb.write(out);
		out.flush();
		out.close();
	}
	
	
	public <T> T tcPropMapping(T bean, TCComponent tcObject)
			throws IllegalArgumentException, IllegalAccessException, TCException {
		if (bean != null && tcObject != null) {
			Field[] fields = bean.getClass().getDeclaredFields();
			for (int i = 0; i < fields.length; i++) {
				fields[i].setAccessible(true);
				TCPropertes tcPropName = fields[i].getAnnotation(TCPropertes.class);
				if (tcPropName != null) {
					String propertyName = tcPropName.tcProperty();
					Object val = null;
					tcObject.refresh();
					if (CommonTools.isNotEmpty(propertyName)) {
						if (tcObject.isValidPropertyName(propertyName)) { // 判断属性是否存在
							if ("cm0AuthoringChangeRevision".equals(propertyName)) {
								TCComponent relatedComponent = tcObject.getRelatedComponent(propertyName);
								if (CommonTools.isNotEmpty(relatedComponent)) {
									val = relatedComponent.getProperty("item_id");
								}								
							} else {
								val = tcObject.getProperty(propertyName);
							}
							
							if (fields[i].getType() == Integer.class) {
								if (val.equals("") || val == null) {
									val = "";
								} else {
									val = Integer.parseInt((String) val);
								}
							}
							fields[i].set(bean, val);
						} else {
							System.out.println(propertyName + " propertyName is not exist ");
							bean = null;
//							break;
							continue;
						}
					}					
				}
			}
		}
		return bean;
	}

	/**
	 * 返回默认文件名称
	 * 
	 * @param component
	 * @return
	 * @throws TCException
	 */
	private String getDefaultFileName(TCComponent component, String functionName) throws TCException {
		String itemId = component.getProperty("item_id");
		String version = component.getProperty("item_revision_id");
		System.out.println(itemId + "/" + version + "_"  + functionName + "_" + formatNowDate("yyyyMMdd"));		
		return itemId + "_" + version + "_"  +functionName + "_" + formatNowDate("yyyyMMdd");
	}

	/**
	 * 格式化的日期
	 * 
	 * @param formatStr
	 * @return
	 */
	public String formatNowDate(String formatStr) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(formatStr);
		return formatter.format(LocalDateTime.now());
	}

	/**
	 * 文件选择器
	 * 
	 * @param fileName
	 * @return
	 */
	public File openFileChooser(String fileName) {
		JFileChooser jFileChooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel", "xlsx");
		jFileChooser.setFileFilter(filter);
		jFileChooser.setSelectedFile(new File(fileName + ".xlsx"));
		int openDialog = jFileChooser.showSaveDialog(null);
		if (openDialog == JFileChooser.APPROVE_OPTION) {
			File file = jFileChooser.getSelectedFile();
			String fname = jFileChooser.getName(file);
			if (fname.indexOf(".xlsx") == -1) {
				file = new File(jFileChooser.getCurrentDirectory(), fname + ".xlsx");
			}
			return file;
		}
		return null;
	}
}
