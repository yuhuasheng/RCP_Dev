package com.foxconn.mechanism.custommaterial.custommaterialnumrequest.window;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import org.apache.commons.collections4.map.HashedMap;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.foxconn.mechanism.custommaterial.custommaterialbatchimport.CustomMaterialBatchImportAction;
import com.foxconn.mechanism.custommaterial.custommaterialbatchimport.CustomMaterialConfigEntity;
import com.foxconn.mechanism.custommaterial.custommaterialbatchimport.CustomMaterialDataEntity;
import com.foxconn.mechanism.custommaterial.custommaterialbatchimport.CustomMaterialProperty;
import com.foxconn.mechanism.custommaterial.custommaterialnumrequest.SupplierEntity;
import com.foxconn.mechanism.hhpnmaterialapply.constants.IconsEnum;
import com.foxconn.mechanism.hhpnmaterialapply.util.BOMTreeTools;
import com.foxconn.mechanism.util.CommonTools;
import com.foxconn.mechanism.util.TCUtil;
import com.teamcenter.rac.aif.AbstractAIFDialog;
import com.teamcenter.rac.aif.AbstractAIFUIApplication;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.aif.kernel.InterfaceAIFComponent;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentFolder;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCPreferenceService;
import com.teamcenter.rac.ui.common.RACUIUtil;
import com.teamcenter.rac.util.Registry;

import cn.hutool.core.io.IoUtil;
import cn.hutool.http.HttpUtil;
import www.fjj.com.Util;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.layout.RowData;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;

public class CustomMaterialNumService{
	
	private CustomMaterialNumDialog window;

	public CustomMaterialNumService(CustomMaterialNumDialog window) {
		this.window = window; 
	}
	
	public void onChangeItem(CCombo cmb) {
		
		String value = cmb.getText(); //获取combo下拉框选择的值
		
		if(cmb==window.cmb_49pcb_BOARD_maker_code) {
			window.txt_supplier.setText("");
			window.txt_contact.setText("");
			window.txt_fax.setText("");
			window.txt_tel.setText("");
			window.txt_address.setText("");
			String filter = value;
			List<SupplierEntity> list = getSupplier("makerName",filter);		
			if(list != null && list.size()>0) {
				SupplierEntity item = list.get(0);
				window.txt_supplier.setText(item.name);
				window.txt_contact.setText(item.contact);
				window.txt_fax.setText(item.fax);
				window.txt_tel.setText(item.tel);
				window.txt_address.setText(item.address);
				cmb.setData("d9_ManufacturerID", item.manufacturerID);
			}
		}
		
		if(cmb==window.cmb_79_production_type) {
			boolean ft = "INCLUDE (SMD/AI/OTHER/PRE-FORMING)".equals(value) || "IC+FW".equals(value);
			if(!ft) {
				window.cmb_derivative_model_has.select(1);
				window.lab_derivative_model_id_code.setVisible(ft);
				window.txt_derivative_model_id_code.setVisible(ft);
				window.lab_derivative_model_id_code_star.setVisible(ft);
			}

			
			window.lab_derivative_model_has.setVisible(ft);
			window.cmb_derivative_model_has.setVisible(ft);
			window.lab_derivative_model_has_star.setVisible(ft);
			
			window.labe_pin_ming_consulting_star.setVisible(!ft);
		}
		
		if(cmb==window.cmb_derivative_model_has) {
			
			boolean ft = "是".equals(value);
			window.lab_derivative_model_id_code.setVisible(ft);
			window.txt_derivative_model_id_code.setVisible(ft);
			window.lab_derivative_model_id_code_star.setVisible(ft);
			window.labe_pin_ming_consulting_star.setVisible(ft);
			if(!ft) {
				// 否
				window.txt_derivative_model_id_code.setText("");
				window.lab_pcba_matiralNo.setText("PCBA 料號");
			}else {
				// 是
				window.lab_pcba_matiralNo.setText("原 PCBA 料號");
			}
		}
	}
	
	public boolean onComplete(String label,String action,TCComponent tcCom,Map<String,String> outData) throws TCException{
		// 计算临时料号
		String num = "";
		List<CustomMaterialProperty> fieldMap = CustomMaterialBatchImportAction.getFieldMap(new CustomMaterialConfigEntity(), label);
		for(CustomMaterialProperty proerty : fieldMap) {
			String configtype = proerty.configtype();
			String name = proerty.configproperty();
			if("F".equals(configtype)){
				num+=proerty.value();
			}else if("A".equals(configtype)) {
				String configproperty = proerty.configproperty();
				String value = outData.get(configproperty).split(CustomMaterialNumDialog.lovSeparator)[1];
				num+=value.toUpperCase(Locale.ROOT);
			}else if("I".equals(configtype)) {
				String configproperty = proerty.configproperty();
				String value = outData.get(configproperty);
				int size = proerty.configsize();
				int position = proerty.configposition();
				num+=value.substring(position-1,position-1+size).toUpperCase(Locale.ROOT);
			}else if("M".equals(configtype)) {
				String configproperty = proerty.configproperty();
				String value = outData.get(configproperty);
				num+=value.toUpperCase(Locale.ROOT);
			}else if(name.equals("成品Model Name")&&label.equals(CustomMaterialNumDialog.LABEL_79)) {
				String tempNum = outData.get("tempNum");						
				num+=tempNum.toUpperCase(Locale.ROOT);
			}
			
		}
		
		System.out.println(num);
		

		List<CustomMaterialProperty> dataMap = CustomMaterialBatchImportAction.getFieldMap(new CustomMaterialDataEntity(), label);
		String tcType = dataMap.get(0).tctype();
		Map<String,Object> tcMap = new HashedMap<>();
		tcMap.put("d9_TempPN", num);
		tcMap.put("d9_FoxconnModelName", outData.get("成品Model Name 全值"));
		if(label.equals(CustomMaterialNumDialog.LABEL_49)) {
			tcMap.put("d9_ManufacturerID", outData.get("d9_ManufacturerID"));
		}
		
		if(!CustomMaterialNumDialog.ACTION_MODIFY.equals(action)) {
			tcMap.put("d9_Is2ndSource", CustomMaterialNumDialog.ACTION_2ND.equals(action));
		}				
		for(CustomMaterialProperty property : dataMap) {
			String key = property.value();
			String excelproperty = property.excelproperty();
			String value = outData.get(excelproperty);
			if("物料群組".equals(excelproperty)||"進料方式".equals(excelproperty)||"用量單位".equals(excelproperty)) {
				value = value.split(CustomMaterialNumDialog.lovSeparator)[0];						
				tcMap.put(key,value.split(":")[0]);
			}else {
				if(value!=null) {
					value = value.split(CustomMaterialNumDialog.lovSeparator)[0];
					tcMap.put(key,value);
					if(label.equals(CustomMaterialNumDialog.LABEL_79)&&action.equals(CustomMaterialNumDialog.ACTION_CREATE)) {
						if("PRODUCTION TYPE".equals(excelproperty)) {
							if("INCLUDE (SMD/AI/OTHER/PRE-FORMING)".equals(value)) {
								tcMap.put("item_revision_id","00");
							}else {
								tcMap.put("item_revision_id","A");
							}	
						}														
					}
				}
			}					
		}
		
		if(CustomMaterialNumDialog.ACTION_MODIFY.equals(action)) {
			for(String key:tcMap.keySet()) {
				try {
					tcCom.setProperty(key, ""+tcMap.get(key));						
				} catch (TCException e) {
					e.printStackTrace();
				}
			}
		}else if(CustomMaterialNumDialog.ACTION_2ND.equals(action)) {
			String mainId = tcCom.getProperty("item_id");
			tcMap.put("d9_TempPN", num+"#"+mainId);
			try {
				TCUtil.setBypass(TCUtil.getTCSession());
				TCComponent secondSoureComponent = TCUtil.createCom(TCUtil.getTCSession(), tcType, "", tcMap);
				TCComponentItemRevision itemRevision= (TCComponentItemRevision) tcCom;	
				AIFComponentContext[] whereReferenced = itemRevision.getItem().whereReferenced();
				for(AIFComponentContext context : whereReferenced) {
					 InterfaceAIFComponent component = context.getComponent();
					if (component instanceof TCComponentFolder) {
						String type = component.getType();
						if("Folder".equals(type)) {
							((TCComponentFolder) component).add("contents", secondSoureComponent);
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				TCUtil.closeBypass(TCUtil.getTCSession());
			}
		}else {
			CustomMaterialBatchImportAction.createCustomMaterial(tcCom,tcType, "", tcMap);
		}
		return true;
	}
	
	public List<SupplierEntity> getSupplier(String key,String filter){
		List<SupplierEntity> list = getSupplierInfo(key,filter);
		for(SupplierEntity entity:list) {
			if(entity.address == null) {
				entity.address = "";
			}
			if(entity.name == null) {
				entity.name = "";
			}
			if(entity.contact == null) {
				entity.contact = "";
			}
			if(entity.fax == null) {
				entity.fax = "";
			}
			if(entity.tel == null) {
				entity.tel = "";
			}
			if(entity.manufacturerID == null) {
				entity.manufacturerID = "";
			}
		}
//		SupplierEntity supplierEntity = new SupplierEntity();
//		supplierEntity.name = "戴尔";
//		supplierEntity.contact = "石亮";
//		supplierEntity.fax = "fax123123123";
//		supplierEntity.tel = "15236565320";
//		supplierEntity.address = "开普勒-22B中国湖北省武汉市洪山区南湖社区２栋１单元２２２２";		        
//		list.add(supplierEntity);
//		supplierEntity = new SupplierEntity();
//		supplierEntity.name = "联想";
//		supplierEntity.tel = "18888888888";
//		supplierEntity.contact = "刘辉";
//		supplierEntity.fax = "fax456456";
//		supplierEntity.address = "开普勒-22B中国湖北省武汉市洪山区南湖社区２栋１单元２２２3";		        
//		list.add(supplierEntity);
		return list;
	}
	
	private List<SupplierEntity> getSupplierInfo(String key,String value) {
		List<SupplierEntity> list = new ArrayList<>();
		try {
			JSONObject jsonObject = new JSONObject();
			jsonObject.put(key, value);
			String ip = TCUtil.getPreference(RACUIUtil.getTCSession(), TCPreferenceService.TC_preference_site, "D9_SpringCloud_URL");
			String rs = HttpUtil.post(ip+":80" + "/tc-integrate/maker/searchMakerInfo", jsonObject.toJSONString());
			JSONObject jsonObj = JSON.parseObject(rs);
			JSONArray jsonArr = JSON.parseArray(jsonObj.getString("data"));
			for (Object object : jsonArr) {
				JSONObject jsonObj2 = (JSONObject)object;
				SupplierEntity supplierEntity = new SupplierEntity();
				supplierEntity.name = jsonObj2.getString("makerName");
				supplierEntity.tel = jsonObj2.getString("tel");
				supplierEntity.contact = jsonObj2.getString("contactMan");
				supplierEntity.fax = jsonObj2.getString("faxNumber");
				supplierEntity.address = jsonObj2.getString("address");
				supplierEntity.manufacturerID = jsonObj2.getString("manufacturerID");
				list.add(supplierEntity);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;		
	}

	
}
