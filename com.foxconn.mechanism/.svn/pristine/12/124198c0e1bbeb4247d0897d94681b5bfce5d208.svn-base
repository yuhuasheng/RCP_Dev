package com.foxconn.mechanism.dtpac.matmaintain.util;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ListIterator;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;

import com.foxconn.mechanism.dtpac.matmaintain.dialog.PACMatMaintainDialog;
import com.foxconn.mechanism.dtpac.matmaintain.domain.ExcelBean;
import com.foxconn.mechanism.dtpac.matmaintain.domain.MatMaintainBean;
import com.foxconn.mechanism.dtpac.matmaintain.domain.MatMaintainConstant;
import com.foxconn.tcutils.util.CommonTools;
import com.foxconn.tcutils.util.TCPropertes;
import com.simple.traditionnal.util.S2TTransferUtil;
import com.teamcenter.rac.kernel.TCComponentFnd0TableRow;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCException;

import cn.hutool.core.bean.BeanUtil;

public class TableTools {
	
	public static void updateData(MatMaintainBean bean, int index, String str) {
		try {
			Field[] fields = bean.getClass().getDeclaredFields();
			List<Field> fieldList = new ArrayList<Field>(Arrays.asList(fields));
			fieldList.removeIf(field -> field.getAnnotation(TCPropertes.class) == null);
			fieldList.removeIf(field -> field.getType() == boolean.class);
			for (Field field : fieldList) {
				field.setAccessible(true);
				TCPropertes tcProp = field.getAnnotation(TCPropertes.class);
				int cell = tcProp.cell();
				if (index != cell) {
					continue;
				}
				
				Object val = str;
				Object orignValue = field.get(bean); // 获取原始值
				
				if (("".equals(orignValue) || orignValue == null) && (!"".equals(val) && val != null)) {
					bean.setHasModify(true); // 设置发生更改
				} else if ((!"".equals(orignValue) && orignValue != null) && ("".equals(val) || val == null)) {
					bean.setHasModify(true); // 设置发生更改
				} else if ((!"".equals(orignValue) && orignValue != null) && (!"".equals(val) || val != null)) {
					if (field.getType() == Integer.class) {
						if (((Integer) orignValue).intValue() != ((Integer) val).intValue()) {
							bean.setHasModify(true); // 设置发生更改
						}
					} else {
						if (!orignValue.toString().equals(val.toString())) {
							bean.setHasModify(true); // 设置发生更改
						}
					}
				}
				
				if (field.getType() == Integer.class) {
					if ("".equals(str) || str == null) {
						val = "";
					} else {
						val = Integer.parseInt(str);
					}

				} else {
					if (str == null) {
						val = "";
					}
				}

				field.set(bean, val);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void addRow(TableViewer tv, PACMatMaintainDialog dialog) {
		List<MatMaintainBean> cacheDataList = dialog.getCacheDataList();
		List<MatMaintainBean> list = (List<MatMaintainBean>) tv.getInput();
		MatMaintainBean newBean = createBean(list, dialog, null, false);
		newBean.setUUID(CommonTools.getUUID()); // 设置UUID
		tv.add(newBean); // 增加到表格界面
		newBean.setHasModify(true);
		
		int rowIndex = -1;
		TableItem[] items = tv.getTable().getSelection();
		if (CommonTools.isNotEmpty(items)) {
			TableItem lastItem = items[items.length - 1];
			rowIndex = tv.getTable().indexOf(lastItem);
		}
		
		if (rowIndex != -1) {
			rowIndex++;
			list.add(rowIndex, newBean);
			cacheDataList.add(rowIndex, newBean);
		} else {
			list.add(newBean);
			cacheDataList.add(newBean);
		}
		
		tv.setInput(list);
		tv.refresh(true);
	}
	
	
	public static void deleteRow(List<MatMaintainBean> list) {
		ListIterator listIterator = list.listIterator();
		while (listIterator.hasNext()) {
			MatMaintainBean deleteBean = (MatMaintainBean) listIterator.next();
			deleteBean.setDelete(true);
			deleteBean.setHasModify(true);
			deleteBean.setSelect(true);
		}
	}
	
	
	public static void recoveryRow(List<MatMaintainBean> list) {
		ListIterator listIterator = list.listIterator();
		while (listIterator.hasNext()) {
			MatMaintainBean deleteBean = (MatMaintainBean) listIterator.next();
			deleteBean.setDelete(false);
			deleteBean.setHasModify(true);
			deleteBean.setSelect(true);
		}
	}
	
	/**
	 * 在此方法中，界面清空记录，后台数据用缓存list集合记录
	 * @param tv
	 */
	public static void clearTableRow(TableViewer tv, PACMatMaintainDialog dialog) {
		List<MatMaintainBean> cacheDataList = dialog.getCacheDataList();
		List<MatMaintainBean> input = (List<MatMaintainBean>) tv.getInput();
		Table table = tv.getTable();
		TableItem[] items = table.getItems();
		for (int i = 0; i < items.length; i++) {
			TableItem item = items[i];
			MatMaintainBean bean = (MatMaintainBean) item.getData();
			bean.setDelete(true);
			table.remove(i);
			resetCacheDataList(cacheDataList, new ArrayList<MatMaintainBean>() {{
				add(bean);
			}}); // 放入缓存中
			input.remove(bean);
		}
		
		tv.refresh();
	}	
	
	
	public static MatMaintainBean createBean(List<MatMaintainBean> totalList, PACMatMaintainDialog dialog, MatMaintainBean selectBean, boolean copy) {
		List<Integer> indexList = null;
		if (CommonTools.isEmpty(totalList)) {
			indexList = new ArrayList<Integer>();
			indexList.add(0);
		} else {
			indexList = getIndexList(totalList);
		}		
		
		MatMaintainBean resultBean = new MatMaintainBean();
		if (CommonTools.isEmpty(totalList)) {
			MatMaintainBean newBean = new MatMaintainBean();
			newBean.setPartType(dialog.getPartType());
			newBean.setMatType(dialog.getCurMatType());
			newBean.setMatName(dialog.getCurMatName());
			newBean.setItemId(dialog.getCacheDataList().get(0).getItemId());
			newBean.setVersion(dialog.getCacheDataList().get(0).getVersion());
			String defaultType = dialog.getTypeList().get(0);
			newBean.setType(defaultType);
			List<String> matList = dialog.getLovValue(dialog.getPartType(), dialog.getCurMatType(), dialog.getCurMatName(), defaultType);
			String defaultMat = matList.get(0);
			newBean.setMaterial(defaultMat);
			newBean.setTableQty("1");
			List<ExcelBean> matBeanList = dialog.getMatBeanList();
			Optional<ExcelBean> findAny = matBeanList.stream().filter(e -> e.getPartType().equals(S2TTransferUtil.toTraditionnalString(newBean.getPartType())) 
					&& e.getMatType().equals(S2TTransferUtil.toTraditionnalString(newBean.getMatType()))&& e.getMatName().equals(S2TTransferUtil.toTraditionnalString(newBean.getMatName())) 
					&& e.getType().equals(S2TTransferUtil.toTraditionnalString(newBean.getType())) && e.getMaterial().contains(S2TTransferUtil.toTraditionnalString(newBean.getMaterial()))).findAny();
			if (findAny.isPresent()) {
				ExcelBean excelBean = findAny.get();
				newBean.setUsageCalculation(excelBean.getUsageCalculation());
				newBean.setCalcullationUnit(excelBean.getCalcullationUnit());
			}
			
			BeanUtil.copyProperties(newBean, resultBean);
		} else {
			MatMaintainBean bean = totalList.get(0);
			BeanUtil.copyProperties(bean, resultBean);
		}
		
		int maxIndex = Collections.max(indexList);
		maxIndex++;
		resultBean.setIndex(maxIndex);
		return resultBean;
	}
	
	private static List<Integer> getIndexList(List<MatMaintainBean> list) {
		return list.stream().map(bean -> bean.getIndex()).collect(Collectors.toList());
	}
	
	
	public static void resetData(PACMatMaintainDialog dialog) {
		List<MatMaintainBean> cacheDataList = dialog.getCacheDataList();
		for (MatMaintainBean bean : cacheDataList) {
			bean.setPartType(dialog.getPartType());
			bean.setMatType(dialog.getCurMatType());
			bean.setMatName(dialog.getCurMatName());
		}
	}
	
	
	/**
	 * 匹配记录
	 * @param list
	 * @param bean
	 */
	public static void resetCacheDataList(List<MatMaintainBean> cacheDataList, List<MatMaintainBean> list) {	
		if (CommonTools.isEmpty(list)) {
			return;
		}
		
		for (MatMaintainBean bean : list) {
			Optional<MatMaintainBean> findAny = cacheDataList.stream().filter(e -> e.getUUID().equals(bean.getUUID())).findAny();
			if (findAny.isPresent()) {
				MatMaintainBean findBean = findAny.get();
				cacheDataList.remove(findBean);
				cacheDataList.add(bean);
			}
		}
		
	}
	
	
	public static List<MatMaintainBean> getList(List<MatMaintainBean> custNodeList, Boolean flag) {
		List<MatMaintainBean> tempList = new ArrayList<MatMaintainBean>();
		if (CommonTools.isNotEmpty(custNodeList)) {
			custNodeList.forEach(bean -> {
				if (flag) {
					if (bean.isDelete()) {
						tempList.add(bean);
					}
				} else {
					if (!bean.isDelete()) {
						tempList.add(bean);
					}
				}

			});
		}

		return tempList;
	}
	
 	public static List<MatMaintainBean> getCustNodes(TableViewer tv) {
		IStructuredSelection selection = (IStructuredSelection) tv.getSelection();
		if (CommonTools.isEmpty(selection)) {
			return null;
		}
		if (selection.size() > 0) {
			return selection.toList();
		}
		return null;
	}
	
	
}
