package com.foxconn.tcutils.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.filechooser.FileSystemView;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Shell;

import com.teamcenter.rac.aif.AIFDesktop;
import com.teamcenter.rac.aif.kernel.AIFComponentContext;
import com.teamcenter.rac.ets.external.DispatcherRequestFactory;
import com.teamcenter.rac.ets.external.RequestResult;
import com.teamcenter.rac.kernel.ITypeName;
import com.teamcenter.rac.kernel.ServiceData;
import com.teamcenter.rac.kernel.TCAccessControlService;
import com.teamcenter.rac.kernel.TCComponent;
import com.teamcenter.rac.kernel.TCComponentBOMLine;
import com.teamcenter.rac.kernel.TCComponentBOMWindow;
import com.teamcenter.rac.kernel.TCComponentBOMWindowType;
import com.teamcenter.rac.kernel.TCComponentDataset;
import com.teamcenter.rac.kernel.TCComponentDatasetType;
import com.teamcenter.rac.kernel.TCComponentItem;
import com.teamcenter.rac.kernel.TCComponentItemRevision;
import com.teamcenter.rac.kernel.TCComponentItemRevisionType;
import com.teamcenter.rac.kernel.TCComponentItemType;
import com.teamcenter.rac.kernel.TCComponentListOfValues;
import com.teamcenter.rac.kernel.TCComponentListOfValuesType;
import com.teamcenter.rac.kernel.TCComponentProcess;
import com.teamcenter.rac.kernel.TCComponentProcessType;
import com.teamcenter.rac.kernel.TCComponentQuery;
import com.teamcenter.rac.kernel.TCComponentQueryType;
import com.teamcenter.rac.kernel.TCComponentRevisionRule;
import com.teamcenter.rac.kernel.TCComponentRevisionRuleType;
import com.teamcenter.rac.kernel.TCComponentTaskTemplate;
import com.teamcenter.rac.kernel.TCComponentTaskTemplateType;
import com.teamcenter.rac.kernel.TCException;
import com.teamcenter.rac.kernel.TCPreferenceService;
import com.teamcenter.rac.kernel.TCQueryClause;
import com.teamcenter.rac.kernel.TCSession;
import com.teamcenter.rac.kernel.TCTextService;
import com.teamcenter.rac.kernel.TCTypeService;
import com.teamcenter.rac.kernel.TCUserService;
import com.teamcenter.rac.ui.common.RACUIUtil;
import com.teamcenter.rac.util.MessageBox;
import com.teamcenter.schemas.soa._2006_03.exceptions.ServiceException;
import com.teamcenter.services.rac.core.DataManagementService;
import com.teamcenter.services.rac.core._2013_05.DataManagement.GenerateNextValuesIn;
import com.teamcenter.services.rac.core._2013_05.DataManagement.GenerateNextValuesResponse;
import com.teamcenter.services.rac.core._2013_05.DataManagement.GeneratedValue;
import com.teamcenter.services.rac.core._2013_05.DataManagement.GeneratedValuesOutput;
import com.teamcenter.services.rac.workflow.WorkflowService;
import com.teamcenter.services.rac.workflow._2007_06.Workflow.ReleaseStatusInput;
import com.teamcenter.services.rac.workflow._2007_06.Workflow.ReleaseStatusOption;
import com.teamcenter.services.rac.workflow._2007_06.Workflow.SetReleaseStatusResponse;

public class TCUtil {

	private static TCComponentItemRevisionType itemRevType = null;
	private static TCComponentDatasetType datasetType = null;
	private static TCComponentItemType itemType;
	private static TCTextService tcTextService = null;
	private static final String D9_PREFIX = "d9_";
	private static final String POC_STR = "IR_";
	
	public static AIFDesktop getDesktop() {
		return AIFDesktop.getActiveDesktop();
	}

	public static void centerShell(Shell shell) {
		int width = shell.getMonitor().getClientArea().width;
		int height = shell.getMonitor().getClientArea().height;
		int x = shell.getSize().x;
		int y = shell.getSize().y;
		if (x > width) {
			shell.getSize().x = width;
		}
		if (y > height) {
			shell.getSize().y = height;
		}
		shell.setLocation((width - x) / 2, (height - y) / 2);
	}

	/**
	 * 打开文件选择器
	 * 
	 * @return 文件路径
	 */
	public static String openFileChooser(Shell shell) {
		FileDialog fileDialog = new FileDialog(shell);
		fileDialog.setFilterPath(getSystemDesktop());
		fileDialog.setFilterNames(new String[] { "Microsoft Excel(*.xlsx)", "Microsoft Excel(*.xls)" });
		fileDialog.setFilterExtensions(new String[] { "*.xlsx", "*.xls" });
		return fileDialog.open();
	}

	/**
	 * 获取系统桌面路径
	 * 
	 * @return
	 */
	private static String getSystemDesktop() {
		File desktopDir = FileSystemView.getFileSystemView().getHomeDirectory();
		return desktopDir.getAbsolutePath();
	}

	public static TCSession getTCSession() {
		return RACUIUtil.getTCSession();
	}

	/**
	 * 弹出消息框
	 * 
	 * @return
	 */
	public static void infoMsgBox(String info, String title) {
		if (CommonTools.isEmpty(title)) {
			MessageBox.displayModalMessageBox(getDesktop().getFrame(), info, "弹出消息框", MessageBox.INFORMATION);
		} else {
			MessageBox.displayModalMessageBox(getDesktop().getFrame(), info, title, MessageBox.INFORMATION);
		}
	}

	public static void warningMsgBox(String info, String title) {
		if (CommonTools.isEmpty(title)) {
			MessageBox.displayModalMessageBox(getDesktop().getFrame(), info, "警告", MessageBox.WARNING);
		} else {
			MessageBox.displayModalMessageBox(getDesktop().getFrame(), info, title, MessageBox.WARNING);
		}
	}

	public static void errorMsgBox(String info, String title) {
		if (CommonTools.isEmpty(title)) {
			MessageBox.displayModalMessageBox(getDesktop().getFrame(), info, "错误", MessageBox.ERROR);
		} else {
			MessageBox.displayModalMessageBox(getDesktop().getFrame(), info, title, MessageBox.ERROR);
		}
	}

	/**
	 * 创建零组件
	 * 
	 * @param itemId
	 * @param itemTypeName
	 * @param itemName
	 * @return
	 */
	public static TCComponentItem createItem(String itemId, String itemTypeName, String itemName) {
		if (CommonTools.isEmpty(itemId)) {
			itemId = null;
		}
		try {
			if (itemType == null) {
				itemType = (TCComponentItemType) getTCSession().getTypeComponent(ITypeName.Item);
			}
			String currentRevId = itemType.getNewRev(null);
			TCComponentItem currentItem = itemType.create(itemId, currentRevId, itemTypeName, itemName, "", null);
			return currentItem;

		} catch (TCException e) {
			e.printStackTrace();
		}
		return null;
	}
	
    /**
     * 创建Item
     * 
     * @param session
     * @param itemId
     * @param itemRev
     * @param itemName
     * @param itemTypeName
     * @return
     */
    public static TCComponentItem create2Item(TCSession session, String itemId, String itemRev, String itemName, String itemTypeName)
    {
        TCComponentItem item = null;
        try
        {
            TCComponentItemType itemType = (TCComponentItemType) session.getTypeComponent(itemTypeName);
            if (itemId.equals(""))
            {
                itemId = itemType.getNewID();
            }
            if (itemRev.equals(""))
            {
                itemRev = itemType.getNewRev(null);
            }
            item = itemType.create(itemId, itemRev, itemTypeName, itemName, "", null);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return item;
    }

	/**
	 * 根据LOV名称获取值列表
	 * 
	 * @param lovName
	 * @return
	 */
	public static Object[] getLovValues(String lovName) {
		TCComponentListOfValues lov = TCComponentListOfValuesType.findLOVByName(getTCSession(), lovName);
		if (lov == null) {
			return new String[0];
		}
		try {
			Object[] objs = lov.getListOfValues().getListOfValues();
			return objs;
		} catch (TCException e) {
			e.printStackTrace();
		}
		return new String[0];
	}

	/**
	 * 获取数组类型首选项值
	 * 
	 * @param session
	 * @param scope          首选项级别
	 * @param preferenceName 首选项名称
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public static List<String> getArrayPreference(int scope, String preferenceName) {
		try {
			TCPreferenceService tCPreferenceService=RACUIUtil.getTCSession().getPreferenceService();
			tCPreferenceService.refresh();
		    String[] array = tCPreferenceService.getStringArray(scope, preferenceName);
		     return Arrays.asList(array);
		}catch(Exception e) {
			System.out.print(e);
		}
		return null;
	}

	/**
	 * 获取字符串类型首选项值
	 * 
	 * @param session
	 * @param scope
	 * @param preferenceName
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public static String getPreference(TCSession session, int scope, String preferenceName) {
		try {
			TCPreferenceService tCPreferenceService=RACUIUtil.getTCSession().getPreferenceService();
			tCPreferenceService.refresh();
	     	return tCPreferenceService.getString(scope, preferenceName);
		}catch(Exception e) {
			System.out.print(e);
		}
		return null;
	}
	
	/**
     * 
     * @param session
     * @param selectFilepath
     * @param dsType
     * @param dsName
     * @param ref_type
     * @return TCComponentDataset
     * @throws TCException
     */
    public static TCComponentDataset createDataSet(TCSession session, String selectFilepath, String dsType, String dsName, String ref_type) throws TCException
    {
        TCComponentDataset dataset = null;
        TCTypeService type = session.getTypeService();
        TCComponentDatasetType datasettype = (TCComponentDatasetType) type.getTypeComponent("Dataset");
        dataset = datasettype.create(dsName, "", dsType);
        String p[] = new String[1];
        String n[] = new String[1];
        p[0] = selectFilepath;
        System.out.println("selectFilepath == " + selectFilepath);
        n[0] = ref_type;
        System.out.println("ref_type == " + ref_type);
        dataset.setFiles(p, n);
        return dataset;
    }

    /**
     * 
     * @param itemRev
     * @param findFileName
     * @return TCComponentDataset
     * @throws TCException
     */
    public static TCComponentDataset findDataSet(TCComponentItemRevision itemRev, String findFileName) throws TCException
    {
        TCComponent[] datesets = itemRev.getRelatedComponents("IMAN_specification");
        for (TCComponent tcComponent : datesets)
        {
            if (tcComponent instanceof TCComponentDataset)
            {
                TCComponentDataset tcComponentDataset = (TCComponentDataset) tcComponent;
                for (String fileName : tcComponentDataset.getFileNames(null))
                {
                    if (fileName.equalsIgnoreCase(findFileName))
                    {
                        return tcComponentDataset;
                    }
                }
            }
        }
        return null;
    }
    
    
    public static boolean isReleased(TCComponent com)
    {
        if (com == null)
        {
            return false;
        }
        try
        {
            com.refresh();
            TCComponent[] relStatus = com.getReferenceListProperty("release_status_list");
            if (relStatus != null && relStatus.length > 0)
            {
                return true;
            }
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    public static boolean isReleased(TCComponent tcc, String[] statusNameArray)
    {
        if (tcc == null || statusNameArray == null || statusNameArray.length < 1)
        {
            return false;
        }
        try
        {
            tcc.refresh();
            TCComponent[] relStatus = tcc.getReferenceListProperty("release_status_list");
            if (relStatus != null && relStatus.length > 0)
            {
                TCComponent status = relStatus[relStatus.length - 1];
                String name = status.getTCProperty("name").getStringValue();
                if (CommonTools.isEmpty(name))
                {
                    return false;
                }
                for (String statusName : statusNameArray)
                {
                    if (CommonTools.isNotEmpty(statusName) && name.equalsIgnoreCase(statusName))
                    {
                        return true;
                    }
                }
            }
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    public static boolean isReleased(TCComponent tcc, String statusName)
    {
        if (tcc == null)
        {
            return false;
        }
        try
        {
            tcc.refresh();
            TCComponent[] relStatus = tcc.getReferenceListProperty("release_status_list");
            if (relStatus != null && relStatus.length > 0)
            {
                TCComponent status = relStatus[relStatus.length - 1];
                String name = status.getTCProperty("name").getStringValue();
                if (CommonTools.isNotEmpty(name) && name.equalsIgnoreCase(statusName))
                {
                    return true;
                }
            }
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    public static String getReleasedName(TCComponent tcc)
    {
        if (tcc == null)
        {
            return null;
        }
        try
        {
            tcc.refresh();
            TCComponent[] relStatus = tcc.getReferenceListProperty("release_status_list");
            if (relStatus != null && relStatus.length > 0)
            {
                TCComponent status = relStatus[relStatus.length - 1];
                String name = status.getTCProperty("name").getStringValue();
                return name;
            }
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * 获取异常信息
     * 
     * @param e
     * @return String
     */
    public static String getExceptionMsg(Exception e)
    {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        return sw.toString();
    }
    
    
    /*
     * 将对象发送到结构管理器
     * 
     * @param session
     * 
     * @param com
     * 
     * @return TCComponentBOMLine
     */
    public static TCComponentBOMLine openBomWindow(TCSession session, TCComponent com)
    {
        TCComponentBOMLine topBomline = null;
        try
        {
            TCComponentItemRevision rev = null;
            TCComponentItem item = null;
            TCComponentRevisionRuleType imancomponentrevisionruletype = (TCComponentRevisionRuleType) session.getTypeComponent("RevisionRule");
            TCComponentRevisionRule imancomponentrevisionrule = imancomponentrevisionruletype.getDefaultRule();
            TCComponentBOMWindowType imancomponentbomwindowtype = (TCComponentBOMWindowType) session.getTypeComponent("BOMWindow");
            TCComponentBOMWindow imancomponentbomwindow = imancomponentbomwindowtype.create(imancomponentrevisionrule);
            if (com instanceof TCComponentItem)
            {
                item = (TCComponentItem) com;
                topBomline = imancomponentbomwindow.setWindowTopLine(item, item.getLatestItemRevision(), null, null);
            }
            else if (com instanceof TCComponentItemRevision)
            {
                rev = (TCComponentItemRevision) com;
                topBomline = imancomponentbomwindow.setWindowTopLine(rev.getItem(), rev, null, null);
            }
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return topBomline;
    }

    /**
     * 创建BOMWindow
     * 
     * @param session
     * @return
     */
    public static TCComponentBOMWindow createBOMWindow(TCSession session)
    {
        TCComponentBOMWindow window = null;
        try
        {
            TCComponentRevisionRuleType imancomponentrevisionruletype = (TCComponentRevisionRuleType) session.getTypeComponent("RevisionRule");
            TCComponentRevisionRule imancomponentrevisionrule = imancomponentrevisionruletype.getDefaultRule();
            TCComponentBOMWindowType imancomponentbomwindowtype = (TCComponentBOMWindowType) session.getTypeComponent("BOMWindow");
            window = imancomponentbomwindowtype.create(imancomponentrevisionrule);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return window;
    }

    public static TCComponentBOMLine getTopBomline(TCComponentBOMWindow bomWindow, TCComponent com)
    {
        TCComponentBOMLine topBomline = null;
        try
        {
        	if (bomWindow == null) {
				return topBomline;
			}
            TCComponentItemRevision rev = null;
            TCComponentItem item = null;
            if (com instanceof TCComponentItem)
            {
                item = (TCComponentItem) com;
                topBomline = bomWindow.setWindowTopLine(item, item.getLatestItemRevision(), null, null);
            }
            else if (com instanceof TCComponentItemRevision)
            {
                rev = (TCComponentItemRevision) com;
                topBomline = bomWindow.setWindowTopLine(rev.getItem(), rev, null, null);
            }
        }
        catch (TCException e)
        {
            e.printStackTrace();
        }
        return topBomline;
    }
    
    
    /**
     * 调用查询构建器查询
     * 
     * @param session
     * @param queryName
     * @param keys
     * @param values
     * @return
     * @throws Exception
     */
    public static TCComponent[] executeQuery(TCSession session, String queryName, String[] keys, String[] values) throws Exception
    {
        TCComponentQueryType imancomponentquerytype = (TCComponentQueryType) session.getTypeComponent("ImanQuery");
        TCComponentQuery query = (TCComponentQuery) imancomponentquerytype.find(queryName);
        if (keys.length != values.length)
        {
            throw new Exception("queryAttributies length is not equal queryValues length");
        }
        String[] queryAttributeDisplayNames = new String[keys.length];
        TCQueryClause[] elements = query.describe();
        for (int i = 0; i < keys.length; i++)
        {
            for (TCQueryClause element : elements)
            {
                //System.out.println("queryName: " + element.getAttributeName());
                if (element.getAttributeName().equals(keys[i]))
                {
                    queryAttributeDisplayNames[i] = element.getUserEntryNameDisplay();
                }
            }
            if (queryAttributeDisplayNames[i] == null || queryAttributeDisplayNames[i].equals(""))
            {
                throw new Exception("queryAttribute\"" + keys[i] + "\"未找到对应的显示名称");
            }
        }
        // System.out.println("queryAttributeDisplayNames:" + Arrays.toString(queryAttributeDisplayNames));
        // System.out.println("queryValues:" + Arrays.toString(values));
        return query.execute(queryAttributeDisplayNames, values);
    }

    /**
     * 开旁路
     * 
     * @param session
     * @throws Exception
     */
    public static void setBypass(TCSession session)
    {
        try
        {
            TCUserService userService = session.getUserService();
            userService.call("set_bypass", new String[] { "" });
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * 关闭旁路
     * 
     * @param session
     * @throws Exception
     */
    public static void closeBypass(TCSession session)
    {
        try
        {
            TCUserService userService = session.getUserService();
            userService.call("close_bypass", new String[] { "" });
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    
    public static TCComponentItem findItem(String itemID) throws TCException
    {
        TCComponentItemType itemType = (TCComponentItemType) getTCSession().getTypeComponent(ITypeName.Item);
        TCComponentItem item = itemType.find(itemID);
        return item;
    }

    public static TCComponentItemRevision findItemRevistion(String revId) throws TCException
    {
        TCComponent tcComponent = getTCSession().getComponentManager().getTCComponent(revId);
        return (TCComponentItemRevision) tcComponent;
    }
    
    public static TCComponentProcess createProcess(String workflowTemplateName, String processName, String desc,
			TCComponent[] att) {
		try {

			TCComponentTaskTemplateType templateType = (TCComponentTaskTemplateType) getTCSession()
					.getTypeComponent(TCComponentTaskTemplateType.EPM_TASKTEMPLATE_TYPE);

			TCComponentTaskTemplate template = templateType.find(workflowTemplateName, 0);
			if (template == null) {
				return null;
			}
			int[] attType = null;
			if (att != null && att.length > 0) {
				attType = new int[att.length];
				for (int i = 0; i < att.length; i++) {
					attType[i] = 1;
				}
			}
			TCComponentProcessType processType = (TCComponentProcessType) getTCSession().getTypeComponent("Job");
			TCComponentProcess process = (TCComponentProcess) processType.create(processName, desc == null ? "" : desc,
					template, att, attType);
			return process;
		} catch (TCException e) {
			e.printStackTrace();
			return null;
		}
	}
    
    public static String getTextValue(String name) {
		if (tcTextService == null) {
			tcTextService = getTCSession().getTextService();
		}
		String res = null;
		try {
			String value = tcTextService.getTextValue(name);
			if (CommonTools.isEmpty(value)) {
				res = name;
			} else {
				res = value;
			}
		} catch (TCException e) {
			res = name;
			e.printStackTrace();
		}
		return res;
	}
    
    public static boolean checkUserPrivilege(TCSession session, TCComponent com) {
		boolean isWrite = false;
		try {
			TCAccessControlService service = session.getTCAccessControlService();
			isWrite = service.checkPrivilege(com, TCAccessControlService.WRITE);
		} catch (TCException e) {
			e.printStackTrace();
		}
		return isWrite;
	}
    
    public static <T> T tcPropMapping(T bean, TCComponent tcObject, String typeStr)
			throws IllegalArgumentException, IllegalAccessException, TCException {
		if (bean != null && tcObject != null) {
			Field[] fields = bean.getClass().getDeclaredFields();
			for (int i = 0; i < fields.length; i++) {
				fields[i].setAccessible(true);
				TCPropertes tcPropName = fields[i].getAnnotation(TCPropertes.class);
				if (tcPropName != null) {
					Object val = "";
					String propertyName = tcPropName.tcProperty();					
					String tctype = tcPropName.tcType();
					if (propertyName.length() == 0 || !tctype.equalsIgnoreCase(typeStr)) {
						continue;
					}
					int index = propertyName.indexOf(D9_PREFIX);
					if (index != -1) {
						String pocPropertyName = propertyName.substring(0, index + D9_PREFIX.length()) + POC_STR
								+ propertyName.substring(index + D9_PREFIX.length());
						if (tcObject.isValidPropertyName(pocPropertyName)) {
							propertyName = pocPropertyName;
						}
					}
					tcObject.refresh();
					
					if (tcObject.isValidPropertyName(propertyName)) {
						val = tcObject.getProperty(propertyName);
					} else {
						System.out.println("==>> itemId: " + tcObject.getProperty("item_id"));
						System.out.println("propertyName is not exist " + propertyName);
					}
					
					if (fields[i].getType() == Integer.class) {
						if (val.equals("") || val == null) {
							val = null;
						} else {
							val = Integer.parseInt((String) val);
						}
					}
					
					fields[i].set(bean, val);
				}
			}
		}
		return bean;
	}
    
    public static <T> Map<String, String> getSavePropMap(T bean, String[] fieldNames) throws Exception {
    	Map<String, String> saveMap = new HashMap<String, String>();
    	for (String fieldName : fieldNames) {
			Field field = bean.getClass().getDeclaredField(fieldName);
			field.setAccessible(true);
			TCPropertes tcProp = field.getAnnotation(TCPropertes.class);
			if (tcProp != null) {
				String tcPropName = tcProp.tcProperty();
				 Object value = field.get(bean) == null ? "" : field.get(bean);				 
				 saveMap.put(tcPropName, value + "");
			}
		}
		return saveMap;
    	
    }
    
    /**
               * 通过uid获取对象
     * @param uid
     * @return
     * @throws TCException
     */
    public TCComponent getTcComponentByUid(String uid) throws TCException {
    	return getTCSession().getComponentManager().getTCComponent(uid);
    }
    
    /**
	 * 解包BOM结构
	 * @param designBOMTopLine
	 * @throws Exception
	 */
    public static void unpackageBOMStructure(TCComponentBOMLine topBOMLine) throws Exception{
		AIFComponentContext[] children = topBOMLine.getChildren();
		for (int i = 0; i < children.length; i++) {
			TCComponentBOMLine bomLine = (TCComponentBOMLine) children[i].getComponent();
			if(bomLine.isPacked()) {
				bomLine.unpack();
			}
			unpackageBOMStructure(bomLine);
		}
	}
    
    public static String post(String actionUrl, String params) throws IOException{
        String serverURL = actionUrl;
        StringBuffer sbf = new StringBuffer();
        String strRead = null;
        URL url = new URL(serverURL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setDoInput(true);
        connection.setDoOutput(true);
        // connection.setRequestProperty("key", "value");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.connect();
        OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream(), "UTF-8");
        writer.write(params);
        writer.flush();
        InputStream is = connection.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
        while ((strRead = reader.readLine()) != null)
        {
            sbf.append(strRead);
            sbf.append("\r\n");
        }
        reader.close();
        connection.disconnect();
        return sbf.toString();
    }
    
    /**
	 * 返回升版规则
	 * 
	 * @param itemRev
	 * @return
	 * @throws TCException
	 */
	public static String getVersionRule(TCComponentItemRevision itemRev) throws TCException {
		String version = itemRev.getProperty("item_revision_id");
		String versionRule = "";
		if (version.matches("[0-9]+")) { // 判断对象版本是否为数字版
			versionRule = "NN";
		} else if (version.matches("[a-zA-Z]+")) { // 判断对象版本是否为字母版
			versionRule = "@";
		}
		return versionRule;
	}
	
	public static String reviseVersion(TCSession session, String ruleMapping, String itemTypeRevName,
			String itemRevUid) {
		String version = null;
		try {
			DataManagementService dataManagementService = DataManagementService.getService(session);
			GenerateNextValuesIn[] ins = new GenerateNextValuesIn[1];
			GenerateNextValuesIn in = new GenerateNextValuesIn();
			ins[0] = in;
			in.businessObjectName = itemTypeRevName;
			in.clientId = "AutoAssignRAC";
			in.operationType = 2;

			Map<String, String> map = new HashMap<String, String>();
			map.put("item_revision_id", ruleMapping);
			in.propertyNameWithSelectedPattern = map;

			Map<String, String> map1 = new HashMap<String, String>();
			map1.put("sourceObject", itemRevUid);
			in.additionalInputParams = map1;

			GenerateNextValuesResponse response = dataManagementService.generateNextValues(ins);
			GeneratedValuesOutput[] outputs = response.generatedValues;
			for (GeneratedValuesOutput result : outputs) {
				Map<String, GeneratedValue> resultMap = result.generatedValues;
				GeneratedValue generatedValue = resultMap.get("item_revision_id");
				version = generatedValue.nextValue;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return version;
	}
	
	
	/**
	 * 发送Dispatcher请求
	 * @param provider the name of the provider that will process this request
	 * @param service the name of the service that will process this request
	 * @param priority the priority to assign to the request(0 LOW to 3 HIGH)
	 * @param primaryObjects the array of primary objects
	 * @param secondaryObjects the array of related secondary objects
	 * @param startTime the time at which to start this request
	 * @param interval the number of times to repeat this request
           	  0 - no repeating
              1 2 3 ... - number of times to repeat this task
	 * @param endTime the time at which no more repeating requests of this same type
              will be processed.  If the interval option for repeating is NOT
              selected, then this paramater is unused
	 * @param type a string for use by the application creating the request for use in
              defining a type for the request (i.e. SYSTEM, THINCLIENT, etc.)
	 * @param requestArgs the array of request arguments in the format of
              <KEY>=<VALUE>  (i.e.  NAME=John)
	 * @return
	 */
	public static boolean sendDispatcherRequest(String provider, String service, int priority, TCComponent[] primaryObjects, TCComponent[] secondaryObjects, String startTime, 
			int interval, String endTime, String type, Map<String, String> requestArgs) {
		try {
			RequestResult request = DispatcherRequestFactory.createDispatcherRequest(provider, service, priority, primaryObjects, secondaryObjects, startTime, interval, endTime, type, requestArgs);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return false;		
	}
	
	
	/**
	 * 新增或删除状态
	 * @param wfService
	 * @param tcComponents
	 * @param statusName
	 * @param operation
	 * @return
	 * @throws Exception
	 */
	public static boolean setOrDelStatus(WorkflowService wfService, TCComponent[] tcComponents, String statusName, String operation) throws Exception {
		ReleaseStatusInput[] releaseStatusInputs = new ReleaseStatusInput[1];
		releaseStatusInputs[0] = new ReleaseStatusInput();
		ReleaseStatusOption[] releaseStatusOptions = new ReleaseStatusOption[1];
		releaseStatusOptions[0] = new ReleaseStatusOption();
		String appendStatus = "";
	    String deleteStatus = "";
	    
	    if ("Append".equals(operation)) {
            appendStatus = statusName;
        }
        if ("Delete".equals(operation)) {
            deleteStatus = statusName;
        }
        
        releaseStatusOptions[0].newReleaseStatusTypeName = appendStatus;
        releaseStatusOptions[0].existingreleaseStatusTypeName = deleteStatus;
        releaseStatusOptions[0].operation = operation;
        
        releaseStatusInputs[0].objects = tcComponents;
        releaseStatusInputs[0].operations = releaseStatusOptions;
        
        SetReleaseStatusResponse response = wfService.setReleaseStatus(releaseStatusInputs);
        String result = getErrorMsg(response.serviceData);
        if (CommonTools.isNotEmpty(result)) {
        	throw new Exception(result);
		}
        return true;
	}
	
	
	 /**
     * 返回错误信息
     *
     * @param data
     * @return
     */
    public static String getErrorMsg(ServiceData data) {
        String errorMsg = "";
        int errorSize = data.sizeOfPartialErrors();
        if (errorSize > 0) {
            for (int i = 0; i < errorSize; i++) {
                errorMsg += errorMsg + Arrays.toString(data.getPartialError(i).getMessages());
            }
        }
        return errorMsg;
    }
}
